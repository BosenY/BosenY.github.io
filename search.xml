<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>next-stage</title>
      <link href="/2018/03/28/next-stage/"/>
      <content type="html"><![CDATA[<p>最近比较忙，也没空弄太多，因为开始搭建和架构公司的一个中间层项目(感觉被委以重任蛮开心的)，用的是阿里开源的<a href="https://eggjs.org/" target="_blank" rel="noopener">eggjs</a>  </p><a id="more"></a><p>最近一直再重新温习nodejs一些知识点，以前也就是乱七八糟乱学一通，也没学出个出息来，这次准备看深入浅出nodejs这本书，外加对koa源码进行一个解读，学习一下nodejs框架的一些设计理念。  </p><p>顺便说一下小程序也发布了1.5.1版本，已经有了很多功能: 比方说可以看pokemon的进化关系，特性等，数据是爬完了，但是需要时间一点一点弄，还得再找时间继续完善  </p><p>今天抽空把Lap的一些css问题修复了一下，可能是自己都看不下去了吧~  </p><p>有空再写，eggjs还是蛮好用的，但是架构公司级的中间层，感觉自己压力蛮大的，还是好好看好好学吧。</p>]]></content>
      
      <categories>
          
          <category> 个人小纪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React高阶组件(转)</title>
      <link href="/2018/03/03/React-high-component/"/>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文代码浅显易懂，思想深入实用。此属于react进阶用法，如果你还不了解react，建议从文档开始看起。</p></blockquote><p>我们都知道高阶函数是什么, 高阶组件其实是差不多的用法，只不过传入的参数变成了react组件，并返回一个新的组件.</p><blockquote><p>A higher-order component is a function that takes a component and returns a new component.<br><a id="more"></a></p></blockquote><p>形如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EnhancedComponent = higherOrderComponent(WrappedComponent);</span><br></pre></td></tr></table></figure></p><p>高阶组件是react应用中很重要的一部分，最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。<br>如果你用过redux，那你就一定接触过高阶组件，因为react-redux中的connect<br>就是一个高阶组件。</p><p>另外本次demo代码都放在 <a href="https://github.com/sunyongjian/hoc-demo" target="_blank" rel="noopener">https://github.com/sunyongjian/hoc-demo</a></p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>先来一个最简单的高阶组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> simpleHoc <span class="keyword">from</span> <span class="string">'./simple-hoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usual</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props, <span class="string">'props'</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Usual</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default simpleHoc(Usual);</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> simpleHoc = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'simpleHoc'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">export default simpleHoc;</span></span><br></pre></td></tr></table></figure><p>组件Usual通过simpleHoc的包装，打了一个log… 那么形如simpleHoc就是一个高阶组件了，通过接收一个组件class Usual，并返回一个组件class。 其实我们可以看到，在这个函数里，我们可以做很多操作。 而且return的组件同样有自己的生命周期，function，另外，我们看到也可以把props传给WrappedComponent(被包装的组件)。 高阶组件的定义我都是用箭头函数去写的，如有不适请参照<a href="http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">arrow function</a></p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>高阶组件可以看做是装饰器模式(Decorator Pattern)在React的实现。即允许向一个现有的对象添加新的功能，同时又不改变其结构，属于包装模式(Wrapper Pattern)的一种</p><p>ES7中添加了一个decorator的属性，使用@符表示，可以更精简的书写。那上面的例子就可以改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> simpleHoc <span class="keyword">from</span> <span class="string">'./simple-hoc'</span>;</span><br><span class="line"></span><br><span class="line">@simpleHoc</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Usual</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Usual</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>是同样的效果。<br>当然兼容性是存在问题的，通常都是通过babel去编译的。 babel提供了plugin，高阶组件用的是类装饰器，所以用transform-decorators-legacy</p><h2 id="两种形式"><a href="#两种形式" class="headerlink" title="两种形式"></a>两种形式</h2><p><br></p><h3 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h3><p>引入里我们写的最简单的形式，就是属性代理(Props Proxy)的形式。通过hoc包装wrappedComponent，也就是例子中的Usual，本来传给Usual的props，都在hoc中接受到了，也就是props proxy。 由此我们可以做一些操作</p><ul><li>操作props<br>最直观的就是接受到props，我们可以做任何读取，编辑，删除的很多自定义操作。包括hoc中定义的自定义事件，都可以通过props再传下去。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> propsProxyHoc = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span></span></span></span><br><span class="line"><span class="xml">      &#123;...this.props&#125;</span></span><br><span class="line"><span class="xml">      handleClick=&#123;this.handleClick&#125;</span></span><br><span class="line"><span class="xml">    /&gt;);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">export default propsProxyHoc;</span></span><br></pre></td></tr></table></figure></li></ul><p>然后我们的Usual组件render的时候, console.log(this.props) 会得到handleClick.</p><ul><li><p>refs获取组件实例<br>当我们包装Usual的时候，想获取到它的实例怎么办，可以通过引用(ref),在Usual组件挂载的时候，会执行ref的回调函数，在hoc中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> refHoc = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.instanceComponent, <span class="string">'instanceComponent'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span></span></span></span><br><span class="line"><span class="xml">      &#123;...this.props&#125;</span></span><br><span class="line"><span class="xml">      ref=&#123;instanceComponent =&gt; this.instanceComponent = instanceComponent&#125;</span></span><br><span class="line"><span class="xml">    /&gt;);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default refHoc;</span></span><br></pre></td></tr></table></figure></li><li><p>抽离state</p></li></ul><p>这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件<a href="https://facebook.github.io/react/docs/forms.html#controlled-components" target="_blank" rel="noopener">（文档）</a>，即把input都做成受控的，改变value的时候，用onChange事件同步到state中。当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较。看一下代码就知道怎么回事了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通组件Login</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> formCreate <span class="keyword">from</span> <span class="string">'./form-create'</span>;</span><br><span class="line"></span><br><span class="line">@formCreate</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label id=<span class="string">"username"</span>&gt;</span><br><span class="line">            账户</span><br><span class="line">          &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input name="username" &#123;...this.props.getField('username')&#125;/</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;label id="password"&gt;</span></span><br><span class="line"><span class="regexp">            密码</span></span><br><span class="line"><span class="regexp">          &lt;/</span>label&gt;</span><br><span class="line">          &lt;input name=<span class="string">"password"</span> &#123;...this.props.getField(<span class="string">'password'</span>)&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div onClick=&#123;this.props.handleSubmit&#125;&gt;提交&lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;other content&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HOC</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formCreate = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      fields: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onChange = <span class="function"><span class="params">key</span> =&gt;</span> e =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      fields: &#123;</span><br><span class="line">        ...this.state.fields,</span><br><span class="line">        [key]: e.target.value,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.fields);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getField = <span class="function"><span class="params">fieldName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      onChange: <span class="keyword">this</span>.onChange(fieldName),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;</span><br><span class="line">      ...this.props,</span><br><span class="line">      handleSubmit: <span class="keyword">this</span>.handleSubmit,</span><br><span class="line">      getField: <span class="keyword">this</span>.getField,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span></span></span></span><br><span class="line"><span class="xml">      &#123;...props&#125;</span></span><br><span class="line"><span class="xml">    /&gt;);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">export default formCreate;</span></span><br></pre></td></tr></table></figure></p><p>这里我们把state，onChange等方法都放到HOC里，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。</p><h3 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h3><p>反向继承(Inheritance Inversion)，简称II，本来我是叫继承反转的…因为有个模式叫控制反转嘛…<br>跟属性代理的方式不同的是，II采用通过 去继承WrappedComponent，本来是一种嵌套的关系，结果II返回的组件却继承了WrappedComponent，这看起来是一种反转的关系。<br>通过继承WrappedComponent，除了一些静态方法，包括生命周期，state，各种function，我们都可以得到。上栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// usual</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> iiHoc <span class="keyword">from</span> <span class="string">'./ii-hoc'</span>;</span><br><span class="line"></span><br><span class="line">@iiHoc</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Usual</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      usual: <span class="string">'usual'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'didMount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Usual</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/IIHOC</span></span><br><span class="line"><span class="regexp">import React from 'react';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const iiHoc = WrappedComponent =&gt; class extends WrappedComponent &#123;</span></span><br><span class="line"><span class="regexp">    render() &#123;</span></span><br><span class="line"><span class="regexp">      console.log(this.state, 'state');</span></span><br><span class="line"><span class="regexp">      return super.render();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default iiHoc;</span></span><br></pre></td></tr></table></figure></p><p>iiHoc return的组件通过继承，拥有了Usual的生命周期及属性，所以didMount会打印，state也通过constructor执行，得到state.usual。<br>其实，你还可以通过II：</p><ul><li>渲染劫持<br>这里HOC里定义的组件继承了WrappedComponent的render(渲染)，我们可以以此进行hijack(劫持)，也就是控制它的render函数。栗子：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hijack-hoc</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hijackRenderHoc = <span class="function"><span class="params">config</span> =&gt;</span> WrappedComponent =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; style = &#123;&#125; &#125; = config;</span><br><span class="line">    <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render();</span><br><span class="line">    <span class="built_in">console</span>.log(elementsTree, <span class="string">'elementsTree'</span>);</span><br><span class="line">    <span class="keyword">if</span> (config.type === <span class="string">'add-style'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;...style&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;elementsTree&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elementsTree;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hijackRenderHoc;</span><br><span class="line"><span class="comment">//usual</span></span><br><span class="line">@hijackRenderHoc(&#123;<span class="attr">type</span>: <span class="string">'add-style'</span>, <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span>&#125;&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usual</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我这里通过二阶函数，把config参数预制进HOC， 算是一种柯理化的思想。<br>栗子很简单，这个hoc就是添加样式的功能。但是它暴露出来的信息却不少。首先我们可以通过config参数进行逻辑判断，有条件的渲染，当然这个参数的作用很多，react-redux中的connect不就是传入了props-key 嘛。再就是我们还可以拿到WrappedComponent的元素树，可以进行修改操作。最后就是我们通过div包裹，设置了style。但其实具体如何操作还是根据业务逻辑去处理的…</p><p><img src="https://user-images.githubusercontent.com/18378034/27580292-bc808a92-5b5c-11e7-9ad4-afec34cab854.png"></p><h3 id="我的应用场景"><a href="#我的应用场景" class="headerlink" title="我的应用场景"></a>我的应用场景</h3><ul><li><p>通常我会通过高阶组件去优化之前老项目写的不好的地方，比如两个页面UI几乎一样，功能几乎相同，仅仅几个操作不太一样，却写了两个耦合很多的页面级组件。当我去维护它的时候，由于它的耦合性过多，经常会添加一个功能(这两个组件都要添加)，我要去改完第一个的时候，还要改第二个。而且有时候由于我的记性不好，会忘掉第二个… 就会出现bug再返工。更重要的是由于个人比较懒，不想去重构这部分的代码，因为东西太多了，花费太多时间。所以加新功能的时候，我会写一个高阶组件，往HOC里添加方法，把那两个组件包装一下，也就是属性代理。这样新代码就不会再出现耦合，旧的逻辑并不会改变，说不定哪天心情好就会抽离一部分功能到HOC里，直到理想的状态。</p></li><li><p>另一种情况就是之前写过一个组件A，做完上线，之后产品加了一个新需求，很奇怪要做的组件B跟A几乎一模一样，但稍微有区别。那我可能就通过II的方式去继承之前的组件A，比如它在didMount去fetch请求，需要的数据是一样的。不同的地方我就会放到HOC里，存储新的state这样，再通过劫持渲染，把不同的地方，添加的地方进行处理。但其实这算Hack的一种方式，能快速解决问题，也反映了组件设计规划之初有所不足(原因比较多)。</p></li><li><p>Container解决不了的时候甚至不太优雅的时候。其实大部分时候包一层Container组件也能做到差不多的效果，比如操作props，渲染劫持。但其实还是有很大区别的。比如我们现在有两个功能的container，添加样式和添加处理函数的，对Usual进行包装。栗子：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//usual</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usual</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props, <span class="string">'props'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Usual</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Usual;</span><br><span class="line"><span class="comment">//console - Object &#123;handleClick: function&#125;  "props"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Usual <span class="keyword">from</span> <span class="string">'./usual'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StyleContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '#<span class="attr">76d0a3</span>' &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;Usual &#123;...this.props&#125; /&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default StyleContainer;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> StyleContainer <span class="keyword">from</span> <span class="string">'./container-add-style'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuncContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;</span><br><span class="line">      ...this.props,</span><br><span class="line">      handleClick: <span class="keyword">this</span>.handleClick,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">StyleContainer</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default FuncContainer;</span></span><br></pre></td></tr></table></figure><p>外层Container必须要引入内层Container，进行包装，还有props的传递，同样要注意包装的顺序。当然你可以把所有的处理都放到一个Container里。那用HOC怎么处理呢，相信大家有清晰的答案了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addFunc = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;</span><br><span class="line">      ...this.props,</span><br><span class="line">      handleClick: <span class="keyword">this</span>.handleClick,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const addStyle = WrappedComponent =&gt; class extends Component &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line">    return (&lt;div style=&#123;&#123; color: '#76d0a3' &#125;&#125;&gt;</span><br><span class="line">      &lt;WrappedComponent &#123;...this.props&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const WrappenComponent = addStyle(addFunc(Usual));</span><br><span class="line"></span><br><span class="line">class WrappedUsual extends Component &#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this.props, 'props');</span><br><span class="line">    return (&lt;div&gt;</span><br><span class="line">      &lt;WrappedComponent /&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显然HOC是更优雅一些的，每个HOC都定义自己独有的处理逻辑，需要的时候只需要去包装你的组件。相较于Container的方式，HOC耦合性更低，灵活性更高，可以自由组合，更适合应付复杂的业务。当然当你的需求很简单的时候，还是用Container去自由组合，应用场景需要你清楚。</p><h3 id="注意点-约束"><a href="#注意点-约束" class="headerlink" title="注意点(约束)"></a>注意点(约束)</h3><p>其实官网有很多，简单介绍一下。</p><ul><li><p>最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数</p></li><li><p>要给hoc添加class名，便于debugger。我上面的好多栗子组件都没写class 名，请不要学我，因为我实在想不出叫什么名了… 当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。<br><img src="https://user-images.githubusercontent.com/18378034/27580322-ce62a6dc-5b5c-11e7-968f-fda656604229.png"></p></li><li><p>静态方法要复制<br>无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。</p></li><li><p>refs不会传递。 意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。</p></li><li><p>不要在render方法内部使用高阶组件。简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。也就是如果你每次返回的结果都不是一个引用，react以为发生了变化，去更替这个组件会导致之前组件的状态丢失。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// HOC不要放到render函数里面</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WrappedUsual</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> WrappenComponent = addStyle(addFunc(Usual));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props, <span class="string">'props'</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">WrappedComponent</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>使用compose组合HOC。函数式编程的套路… 例如应用redux中的middleware以增强功能。redux-middleware解析<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addFuncHOC = ...</span><br><span class="line"><span class="keyword">const</span> addStyleHOC = ...<span class="comment">//省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...funcs</span>) =&gt;</span> component =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.lenght === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> component;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> last = funcs[funcs.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> funcs.reduceRight(<span class="function">(<span class="params">res, cur</span>) =&gt;</span> cur(res), last(component));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WrappedComponent = compose(addFuncHOC, addStyleHOC)(Usual);</span><br></pre></td></tr></table></figure></p><p>关于注意点，官网有所介绍，不再赘述。链接：<a href="https://reactjs.org/docs/higher-order-components.html#dont-mutate-the-original-component.-use-composition." target="_blank" rel="noopener">地址</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>高阶组件最大的好处就是解耦和灵活性，在react的开发中还是很有用的。<br>当然这不可能是高阶组件的全部用法。掌握了它的一些技巧，还有一些限制，你可以结合你的应用场景，发散思维，尝试一些不同的用法。</p><p>原文转自： <a href="https://github.com/sunyongjian/blog/issues/25" target="_blank" rel="noopener">地址</a></p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018新年第一篇</title>
      <link href="/2018/02/24/2018%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
      <content type="html"><![CDATA[<p>过年期间没更新博客也没去更新theme的新功能，倒是也没有懒惰，只是趁着过年期间算是可以有一小段修整的时间，一边给自己放了个假，一边也完成了自己一直想做的一个小程序的第一版 -&gt; <code>精灵宝可梦dex</code>。<br>  <a id="more"></a><br>  最近刚把这个小程序的第一版功能做完，其实我以前倒是也做过小程序，但只是写一点简单的页面和接口对接而已，这次由自己来独立完成一个小程序，可能要考虑的东西蛮多的，比方说:</p><ul><li>小程序的加载速度</li><li>如何提升小程序的用户体验等</li></ul><p>反正也算是将第一版功能保质保量做完了，而且用户体验还不错，不需要进行任何接口调用，我是把数据进行了前期的爬取整理后直接放在本地，所以访问速度得到了保证。 对于图片方面，目前是将宝可梦的图片放到了腾讯云的存储对象中，缩略图本身每张的大小并不是很大，所以没有用雪碧图，可能下一个版本会进行改进。<br>准备在第二版当中继续提升性能，然后加入一些其他功能，比方说进化关系和能力值计算等。    也欢迎其他感兴趣的人一起加入或者提些意见，毕竟一个人做难免有些想法并不是最完美的~  (因为有appID所以不能开源)<br>关于<code>Lap</code>这个hexo theme 最近就准备继续更新，因为也是自己用心弄的一个项目，肯定不能荒废掉，会一直坚持的！</p>]]></content>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于切换到https</title>
      <link href="/2018/02/07/%E5%85%B3%E4%BA%8E%E5%88%87%E6%8D%A2%E5%88%B0https/"/>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>其实不切https也没什么性能上的问题，就是想把chrome上的安全绿锁头显示出来；从另一方面讲，还能减少一些http劫持(这个其实深层次的我也没研究过，包括DNS劫持之类的…)和运营商劫持，切到https后，看上去好像是减少了一些被劫持的几率。<br><a id="more"></a></p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>因为是静态资源，也不想买国内的服务器(有国外的vps了)，所以就用github page，至于简单的如何配置hexo blog这里就不陈述了，反正百度一大把。</p><p>因为github page不能上传ssl证书，所以就用CDN实现反向代理，原理基本上就是利用CDN服务器反向代理到github page 因为CDN服务器是提供https服务的，所以最终自己的域名也会变成https。</p><p>这里我用的是<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">CloudFlare</a>：<br><img src="http://owgraa3f3.bkt.clouddn.com/18-2-7/72109306.jpg" alt=""></p><ul><li>注册一个账号并登陆</li><li>添加一个站点把自定义的域名配入,等扫描，扫描结束点击继续</li><li>DNS项配入，把自己的域名和github page的ip地址配入到DNS解析当中，具体就是创建一个CNAME类型，这里填写的是你原来github page的域名， 然后再创建两个类型是A，name是自己的域名，值是github的ip 192.30.252.153和192.30.252.154，类似于底下这张图：<br><img src="http://owgraa3f3.bkt.clouddn.com/18-2-7/42228843.jpg" alt=""></li><li>然后把下面的DNS服务器里的地址复制好，将自己购买的域名的服务器下的DNS改成这个</li><li>让在Crypto选项处设置ssl为flexible</li><li>在page rules中设置路由规则。然后设置两条规则<em style="color: red;">Always use https</em>一条url是<code>http://域名/</code> ，另一条是<code>http://域名/*</code>，这样就能开启强制https</li><li>都配置好在12小时以内就会生效，然后博客就正式切到https了</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>edit-highlight</title>
      <link href="/2018/02/01/edit-highlight/"/>
      <content type="html"><![CDATA[<p>把Lap的highlight风格做了一次大的调整，改成了自己最喜欢的atom-one-dark，只不过ES6的语法好像暂时没办法高亮，因为hexo内置hl渲染方法渲染出来的dom节点根本没办法对ES6部分写样式。<br>下面的是效果的展示，暂时也算满意了，可能以后还会进行一次调整。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$initHighlight</span>(<span class="params">block, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cls.search(<span class="regexp">/\bno\-highlight\b/</span>) != <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">return</span> process(block, <span class="literal">true</span>, <span class="number">0x0F</span>) +</span><br><span class="line">             <span class="string">` class="<span class="subst">$&#123;cls&#125;</span>"`</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">/* handle exception */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> / <span class="number">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkCondition(classes[i]) === <span class="literal">undefined</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'undefined'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sss = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span>  $initHighlight;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">body &#123;width: 500px;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$init</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">checked</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- here goes the rest of the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>日常随笔</title>
      <link href="/2018/01/28/daily-1/"/>
      <content type="html"><![CDATA[<h3 id="关于Lap"><a href="#关于Lap" class="headerlink" title="关于Lap"></a>关于Lap</h3><p>这个theme现在还差个人介绍模块和article模块没有进行优化，其他的可能弄完以后暂时先不更新了<br>不过该有的功能和统计的东西肯定是会一点一点全部完成的</p><p>对于disqus，虽然看了一下其他人分享的如何去走代理设置让国内也可以访问，但我觉得这个办法还是不太好，既然无法成为一种更加通用可配置的方案，那就暂时不考虑了，也不是每个人都会去买一个vps进行配置，索性接这样弄: 3s访问不到就提示需要翻墙才可以进行评论。。 我觉得这样的处理方法比较通用吧。</p><h3 id="近期安排"><a href="#近期安排" class="headerlink" title="近期安排"></a>近期安排</h3><p>最近可能要继续开始加班了，毕竟年末，所以写开源和学习的自由时间可能不是很多，但我想起我有一部分文章放在了简书，所以我决定先搬运一波，然后在把自己学Graphql的一些东西稍微写写，最近就是graphql了，别的也没空看了，等年后吧~</p><p>最近一到周末就沉迷pokemon revolution不能自拔，可能要写一篇去安利一发了，毕竟是很多90后乃至80后满满的回忆~（更重要的是能和老外尬英文、PY）</p>]]></content>
      
      <categories>
          
          <category> 个人小纪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于最近的折腾</title>
      <link href="/2018/01/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E7%9A%84%E6%8A%98%E8%85%BE/"/>
      <content type="html"><![CDATA[<p>其实一直想用这个写博客的，但是出现过一次问题：<br>  我在win上面提交都是正常的，但是把项目搞到mac上之后提交就出现了bug，研究了半天也没找到完美解决的办法，这才自己去搭建了一个自己的博客。。<br>  <a id="more"></a></p><p>自己是在搬瓦工的vps上搭建的，采用的是golang的gin + React + Nextjs ，总体上倒是没什么问题，唯一的问题就是cdn解析过慢，毕竟有墙的因素在，感觉身在国内确实也没法避免这个问题，性能上反正我自己是忍受不了了，于是还是回来写这个。。 不过好像也更新了很多，可能好多的插件什么的也不能用了，准备近期好好弄一下，把bug都解决掉。</p>]]></content>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ng-router</title>
      <link href="/2017/09/15/ng-router/"/>
      <content type="html"><![CDATA[<h1 id="ng-router"><a href="#ng-router" class="headerlink" title="ng-router"></a>ng-router</h1><p>ng-router可以把angular1变成一个spa应用，在页面上的原理就是渲染了不同的controller来实现不同的路由，具体实例代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>AngularJS 路由实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">'routingDemoApp'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>AngularJS 路由应用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/computers"</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/printers"</span>&gt;</span>打印机<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/blabla"</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/angular-route/1.3.13/angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            angular.module(<span class="string">'routingDemoApp'</span>,[<span class="string">'ngRoute'</span>])</span></span><br><span class="line"><span class="javascript">            .config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                $routeProvider</span></span><br><span class="line"><span class="javascript">                .when(<span class="string">'/'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是首页页面'</span>&#125;)</span></span><br><span class="line"><span class="javascript">                .when(<span class="string">'/computers'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是电脑分类页面'</span>&#125;)</span></span><br><span class="line"><span class="javascript">                .when(<span class="string">'/printers'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是打印机页面'</span>&#125;)</span></span><br><span class="line"><span class="javascript">                .otherwise(&#123;<span class="attr">redirectTo</span>:<span class="string">'/'</span>&#125;);</span></span><br><span class="line"><span class="undefined">            &#125;]);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>首先，载入了实现路由的js文件：angular-route.js； 然后，包含了ngRoute模块作为主应用模块的依赖模块。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'routingDemoApp'</span>,[<span class="string">'ngRoute'</span>])</span><br></pre></td></tr></table></figure></p><p>使用ngView指令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>该div内html会根据路由的变化来变化。</p><p>然后配置$routeProvider, 用于定义我们的路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是首页页面'</span>&#125;)</span><br><span class="line">        .when(<span class="string">'/computers'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是电脑分类页面'</span>&#125;)</span><br><span class="line">        .when(<span class="string">'/printers'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是打印机页面'</span>&#125;)</span><br><span class="line">        .otherwise(&#123;<span class="attr">redirectTo</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> AngularJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ngapi</title>
      <link href="/2017/09/15/ngapi/"/>
      <content type="html"><![CDATA[<h1 id="ngApi"><a href="#ngApi" class="headerlink" title="ngApi"></a>ngApi</h1><p>angular JS全局API用于执行常见任务的JS函数集合，如：</p><ul><li>比较对象</li><li>迭代对象</li><li><p>转换对象<br>简单的说就是将一些工作中常用的方法封装到了angular.prototype上了，<br>下面有几个典型的：</p></li><li><p>angular.lowercase() - 转换字符为小写</p></li><li>angular.uppercase() - 转换字符为大写</li><li>angular.isString() - 判断是否是字符串</li><li>angular.isNumber() - 判断是否是数字</li></ul><p>例子： <a src="http://www.runoob.com/try/tryit.php?filename=try_ng_api_lowercase">地址</a></p>]]></content>
      
      <categories>
          
          <category> AngularJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ng过滤器</title>
      <link href="/2017/09/14/ng%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <content type="html"><![CDATA[<h1 id="ng过滤器"><a href="#ng过滤器" class="headerlink" title="ng过滤器"></a>ng过滤器</h1><p>所有的例子会写在这里：<a src="http://jsbin.com/vigiciresi/edit?html,js,output">例子</a></p><p>首先学习一下ng1的过滤器的一个基本写法：</p><p>一个过滤器，不带参数的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;expression | filter&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>一个过滤器，带参数的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;expression | filter:<span class="built_in">arguments</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>一个过滤器，带多个参数的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;expression | filter: arg1: arg2: ...&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>多个过滤器，不带参数的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;expression | filter1 | filter2 | ...&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>先学习自定义的，现找出来10个：</p><h2 id="1-currency"><a href="#1-currency" class="headerlink" title="1. currency"></a>1. currency</h2><p>顾名思义，用于将数字转换为货币的<br>默认的话，是将数字转化成了当前使用语言环境的符号<br>当然也可以设置自定义符号，格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; currency_expression | currency : symbol : fractionSize&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>其中symbol代表你要自定义的货币符号，fractionSize代表小数位的取舍量</p><h2 id="2-date"><a href="#2-date" class="headerlink" title="2. date"></a>2. date</h2><p>根据要求将时间转换成字符串，开发当中经常用到，<br>格式化的字符串可以由以下原件组成：</p><ul><li>‘yyyy’: 年份用4位数字表示(e.g. AD 1 =&gt; 0001, AD 2010 =&gt; 2010)</li><li>‘yy’: 年份用2位数字表示, 补全0 (00-99). (e.g. AD 2001 =&gt; 01, AD 2010 =&gt; 10)</li><li>‘y’: 年份用最少位数字表示, e.g. (AD 1 =&gt; 1, AD 199 =&gt; 199)</li><li>‘MMMM’: 月份 (January-December)</li><li>‘MMM’: 月份 (Jan-Dec)</li><li>‘MM’: 月份, 补全0 (01-12)</li><li>‘M’: 月份 (1-12)</li><li>‘dd’: 日期, 补全0 (01-31)</li><li>‘d’: 日期 (1-31)</li><li>‘EEEE’: 星期,(Sunday-Saturday)</li><li>‘EEE’: 星期, (Sun-Sat)</li><li>‘HH’: 小时, 补全0 (00-23)</li><li>‘H’: 补全0 (0-23)</li><li>‘hh’: AM/PM 表示的小时, 补全0 (01-12)</li><li>‘h’: AM/PM 表示的小时, (1-12)</li><li>‘mm’: 分钟, 补全0 (00-59)</li><li>‘m’: 分钟 (0-59)</li><li>‘ss’: 秒, 补全0 (00-59)</li><li>‘s’: 秒 (0-59)</li><li>‘sss’: 毫秒, 补全0 (000-999)</li><li>‘a’: AM/PM 标记</li><li>‘Z’: 用4位表示时区的偏移 (-1200-+1200)</li><li>‘ww’: 周数, 补全0 (00-53). 01周是每年的包含第一个周四的周</li><li>‘w’: Week of year (0-53). 01周是每年的包含第一个周四的周</li><li>‘G’, ‘GG’, ‘GGG’: 时代的简写字符串 (e.g. ‘AD’)</li><li>‘GGGG’: 时代的完整字符串 (e.g. ‘Anno Domini’)</li></ul><p>格式字符串还可以是下列预定义的本地化的格式之一:</p><ul><li>‘medium’: en_US 地区的形式，等同于 ‘MMM d, y h:mm:ss a’ (e.g. Sep 3, 2010 12:05:08 PM)</li><li>‘short’: en_US 地区的形式，等同于 ‘M/d/yy h:mm a’ (e.g. 9/3/10 12:05 PM)</li><li>‘fullDate’: en_US 地区的形式，等同于 ‘EEEE, MMMM d, y’ (e.g. Friday, September 3, 2010)</li><li>‘longDate’: en_US 地区的形式，等同于 ‘MMMM d, y’ (e.g. September 3, 2010)</li><li>‘mediumDate’: en_US 地区的形式，等同于 ‘MMM d, y’ (e.g. Sep 3, 2010)</li><li>‘shortDate’: en_US 地区的形式，等同于 ‘M/d/yy’ (e.g. 9/3/10)</li><li>‘mediumTime’: en_US 地区的形式，等同于 ‘h:mm:ss a’ (e.g. 12:05:08 PM)</li><li>‘shortTime’: en_US 地区的形式，等同于 ‘h:mm a’ (e.g. 12:05 PM)</li></ul><p>格式字符串可以包含文字。但是需要使用 ‘ 包裹进行转义 (e.g. “h ‘in the morning’”).<br>如果想使用单引号,则需要转义 - 举个例子, 在一行里有两个单引号 (e.g. “h ‘o’’clock’”).</p>]]></content>
      
      <categories>
          
          <category> AngularJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ng1学习</title>
      <link href="/2017/09/13/angular1/"/>
      <content type="html"><![CDATA[<h1 id="ng1学习"><a href="#ng1学习" class="headerlink" title="ng1学习"></a>ng1学习</h1><p>开始搞新项目，采用hybird开发，web层用ng1搞，呵呵。这下不得不搞ng了。。。 这样下来也算是前端三大框架都玩了一遍（不过也就vue算是熟练）</p><p>先挖个坑，慢慢开始重新写（前面把日志都写到有道云笔记了。准备一点一点搬过来重构博客了）</p>]]></content>
      
      <categories>
          
          <category> AngularJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于es7bind语法的小纪</title>
      <link href="/2017/04/21/es7bind%E8%AF%AD%E6%B3%95%E7%9A%84%E5%B0%8F%E7%BA%AA/"/>
      <content type="html"><![CDATA[<h1 id="有关es7-function-bind-syntax的东西"><a href="#有关es7-function-bind-syntax的东西" class="headerlink" title="有关es7 function bind syntax的东西"></a>有关es7 function bind syntax的东西</h1><p>因为群里有大佬以前提到过，但是因为自己太菜了根本无法理解，所以就去学习了一下。。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>所谓的function bind syntax ，其实就是一个绑定的语法糖，就和箭头函数是类似的（箭头函数是声明函数时绑定this的语法糖，这里就有个坑，用箭头函数声明的方法就不能再使用::去绑定了，不会起作用。。）</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>简单来说<strong>::</strong>有两种作用：</p><ol><li>当::出现在一个对象名的签名，且对象名后面紧跟着一个它的方法名的时候，作用就是把这个对象绑定为这个方法的this</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    method() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">::obj.method</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">obj.method.bind(obj)</span><br></pre></td></tr></table></figure><ol><li>当::出现在对象和方法名之间的时候，将这个对象绑定为这个方法的this,当然，因为这个绑定后还是一个函数，所以也可以直接调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo)</span><br><span class="line">&#125;</span><br><span class="line">obj::method()</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">method.call(obj)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj::method</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">method.bind(obj)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ecmascript7 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初学RxJS</title>
      <link href="/2017/03/20/%E5%88%9D%E5%AD%A6RxJS/"/>
      <content type="html"><![CDATA[<h2 id="初学Rxjs"><a href="#初学Rxjs" class="headerlink" title="初学Rxjs"></a>初学Rxjs</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Rxjs 是一个通过使用可观察序列来构建异步和基于事件的程oberservable序的库，可以吧它当成一个针对于事件的lodash</p><p>Rxjs就是JavaScript的响应式扩展，响应式的思路就是把随时间不断变化的数据、状态、事件等等转化成可被观察的序列(observable sequence),然后订阅序列中那些observable对象的变化，一旦变化，就会执行事先安排好的各种转换和操作<br><a id="more"></a></p><h3 id="四个生命周期"><a href="#四个生命周期" class="headerlink" title="四个生命周期"></a>四个生命周期</h3><ul><li>创建：创建一个observable，返回一个被观察的序列源实例</li><li>订阅：通过序列源实例可以订阅序列发射新数据变更时的响应方法（回调方法）</li><li>执行：响应的动作就是执行</li><li>销毁：通过序列源实例可以销毁，而当订阅方法发生错误时也会自动销毁</li></ul><h3 id="剖析可观察对象"><a href="#剖析可观察对象" class="headerlink" title="剖析可观察对象"></a>剖析可观察对象</h3><p>使用Rx.Observable.create或一个能产生可观察对象的操作符来创造一个可观察对象，使用一个观察者订阅他，执行然后给观察者发送next/error/complete的通知，他们的执行可能会被disposed（处理）。这四个方面均被编码进可观察对象的实例当中。</p><h2 id="核心的可观察对象的概念"><a href="#核心的可观察对象的概念" class="headerlink" title="核心的可观察对象的概念"></a>核心的可观察对象的概念</h2><ul><li>Creating Observables 创建</li><li>Subscribing Obserables 订阅</li><li>Executing the Observable 执行</li><li>Disposing Observables 处理</li></ul><h3 id="Creating-Observables"><a href="#Creating-Observables" class="headerlink" title="Creating Observables"></a>Creating Observables</h3><p>Rx.Observable.create 用来创建一个可观察对象 ，是可观察对象构造函数的别名，它接受一个参数（订阅的 fnuction）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="string">'hi'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Subscribing-Obserables"><a href="#Subscribing-Obserables" class="headerlink" title="Subscribing Obserables"></a>Subscribing Obserables</h3><p>一个可观察对象可以被订阅</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>这里的subscribe和上面create的subscribe是不一样的，但是你可以在概念上将他们等价，上面写成一个匿名函数也是可以的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="string">'hi'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><pre><code>订阅一个可观察对象就像是调用一个函数，在数据将被发送的地方提供回调</code></pre><p>完全不同于addEventListener/removeEventListener事件句柄API,使用observervable.subscribe，给定的观察者并没有作为一个监听者被注册</p><p>订阅数启动可观察对象执行和发送值或者事件给观察者的简单方式</p><h3 id="Executing-the-Observable"><a href="#Executing-the-Observable" class="headerlink" title="Executing the Observable"></a>Executing the Observable</h3><p>执行可观察对象就是在创建时里面的匿名函数做的事情，一个仅在观察者订阅时发生的惰性计算，执行随时间产生多个值，以同步或者异步的方式</p><p>下面是observervable对象可以发送的三种类型的值：</p><ol><li>next 发送一个数字/字符串/对象等等</li><li>error 发送一个js错误或者异常</li><li><p>complete 不发送值<br>next可以在可观察对象执行期间发生多次，而error和complete只能在执行期间发生一次，但仅会执行二者之中的一个</p><pre><code>一个可观察对象的执行期间，零个到无穷多个next通知被发送。如果Error或者Complete通知一旦被发送，此后将不再发送任何值。</code></pre></li></ol><p>一个好的使用方式就是使用try catch语句去包裹通知语句，如果捕获了异常就会发送一个错误通知</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">observer.next(<span class="number">1</span>);</span><br><span class="line">observer.next(<span class="number">2</span>);</span><br><span class="line">observer.next(<span class="number">3</span>);</span><br><span class="line">observer.complete();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">observer.error(err); <span class="comment">// delivers an error if it caught one</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Disposing-Observables"><a href="#Disposing-Observables" class="headerlink" title="Disposing Observables"></a>Disposing Observables</h3><p>处理可观察对象的执行：<br>    由于可观察对象的执行可能是无限的(无数个next)，而对于观察者来说却往往需要在有限的时间内终止执行，因此需要一个api来取消执行。因为每次的执行仅仅服务于一个观察者，一旦观察者听得接收数据，他就不得不通过一个方式去终止执行，从而避免浪费大量的计算性能和内存资源</p><p>这里observable.subscribe被调用返回了一个对象： subscription<br>这个对象表示了正在进行的执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscription = observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>在这里使用subscription.unsubscribe()就可以取消你正在进行的执行</p><h2 id="observer观察者"><a href="#observer观察者" class="headerlink" title="observer观察者"></a>observer观察者</h2><p>观察者就是可观察对象所发送数据的消费者，简单说就是一组回调函数，分别对应一种被可观察对象发送的通知的类型：next、error和complete</p><pre><code>观察者不过是三个回调函数组成的对象，每个回调函数分别对应可观察对象的通知类型</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer=&#123;</span><br><span class="line">next:<span class="function"><span class="params">x</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</span><br><span class="line">error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</span><br><span class="line">complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>)</span><br><span class="line">&#125;</span><br><span class="line">observable.subscribe(observer)</span><br></pre></td></tr></table></figure><p>当订阅一个可观察对象，你仅仅提供回调来作为参数就够了，并不需要完整的观察者对象</p><p>在observable.subscribe内部，他讲使用第一个回调参数作为next的处理句柄创建一个观察者对象，也可以通过将三个函数作为参数提供三种回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(</span><br><span class="line">    x =&gt; <span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</span><br><span class="line">    err =&gt; <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</span><br><span class="line">    () =&gt; <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Subject主题"><a href="#Subject主题" class="headerlink" title="Subject主题"></a>Subject主题</h2><p>Subject是允许值被多播到多个观察者的一种特殊的observable</p><p>Subject就是一个可观察对象，只不过可以被多播至多个观察者。同时Subject也类似于eventemitter：维护着众多事件监听器的注册表</p><ul><li>每一个Subject及时一个可观察对象，又是一个观察者对象，也就是说，它既可以拥有next、error、complete方法，又可以去subscribe它</li><li>观察者： 有next、error等方法</li><li>可观察对象： 可以被订阅<br>demo： </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> Rx.Subject();</span><br><span class="line"></span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  next: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'observerA: '</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  next: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'observerB: '</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">1</span>);</span><br><span class="line">subject.next(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>输出效果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">observerA: <span class="number">1</span></span><br><span class="line">observerB: <span class="number">1</span></span><br><span class="line">observerA: <span class="number">2</span></span><br><span class="line">observerB: <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h3 id="多播的可观察对象"><a href="#多播的可观察对象" class="headerlink" title="多播的可观察对象"></a>多播的可观察对象</h3><p>一个多播的可观察对象可以通过多个订阅者的订阅去传递通知，而普通的单播可观察对象不可以<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source=Rx.Observable.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> subject=<span class="keyword">new</span> Rx.Subject();</span><br><span class="line"><span class="keyword">var</span> multicasted=source.multicast(subject);</span><br><span class="line">multicasted.subscribe(&#123;</span><br><span class="line">  next:<span class="function">(<span class="params">v</span>)=&gt;</span><span class="built_in">console</span>.log(<span class="string">'observerA:'</span> +v);</span><br><span class="line">&#125;);</span><br><span class="line">multicasted.subscribe(&#123;</span><br><span class="line">  next: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'observerB: '</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line">multicasted.connect();</span><br></pre></td></tr></table></figure></p><p>multicast方法返回一个看起来像普通的可观察对象的可观察对象，但是却有着和subject一样的行为，multicast返回一个connectableobservable，他是一个具有connect方法的observable</p><p>connect方法对于觉得何时开始分享可观察对象的执行时非常重要的，在source下面有source.subscribe（subject），connect（）返回一个Subscription，你可以取消订阅，以取消共享的Observable执行。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>redux中间件-reduxsaga学习</title>
      <link href="/2017/03/11/redux%E4%B8%AD%E9%97%B4%E4%BB%B6-reduxsaga%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<h1 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h1><p>考虑到后期项目可能需要去异步对redux进行一些操作，看了react的生态圈，发现这个中间件比较火，就想学习一下，在这里做个简单的记录</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>echarts学习</title>
      <link href="/2017/03/09/echarts%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<h1 id="echarts-api学习"><a href="#echarts-api学习" class="headerlink" title="echarts api学习"></a>echarts api学习</h1><p>因为暂时项目当中使用的是echarts-for-react插件，所以暂时先不考虑了解echarts原生对象的一些方法，<br>先从配置项开始学习。</p><p>首先是初始化一个echarts对象，然后这个对象去调用echarts的setOption方法，配置展示的信息。</p><p>setOption用来写echarts图表的配置信息</p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>标题组件，包含主标题和副标题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">    show: <span class="comment">//是否显示标题组件 默认是true</span></span><br><span class="line">    text:<span class="comment">//主标题文本</span></span><br><span class="line">    link: <span class="comment">//主标题的超文本链接，也可以用在react的路由跳转</span></span><br><span class="line">    target: <span class="comment">//指定打开超链接的方式 默认是新窗口</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="comment">// 主标题颜色</span></span><br><span class="line">        fontWeight: <span class="comment">//主标题文字字体粗细</span></span><br><span class="line">        fontFamily: <span class="comment">// 主标题文字字体</span></span><br><span class="line">        fontSize: <span class="comment">//主标题文字字体大小</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    textAligin: <span class="comment">//标题文本水平对齐方式</span></span><br><span class="line">    textBaseline: <span class="comment">//标题文本垂直对齐方式</span></span><br><span class="line">    subtext: <span class="comment">//副标题文本  副标题也有主标题同样的配置，这里就不记录了</span></span><br><span class="line">    sublink: <span class="comment">//富文本超链接</span></span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//api太多啦，也不记载这么多了，具体的自己去官网看吧，自己就记录一些第一层的配置信息</span></span><br><span class="line"></span><br><span class="line">legend: <span class="comment">//图例组件，展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示</span></span><br><span class="line"></span><br><span class="line">grid: <span class="comment">//直角坐标系内绘图网格，单个grid内最多可以放置上下两个x轴，左右两个y轴。可以在网格上绘制折线图、柱状图、散点图(气泡图)，在echarts3当中可以存在任意多个grid组件</span></span><br><span class="line"></span><br><span class="line">xAxis: <span class="comment">// 直角坐标系grid中的x轴，一般情况下grid组件最多只能放左右两个x轴，多于两个x轴需要通过配置offset防止同个位置多个x轴的重叠</span></span><br><span class="line"></span><br><span class="line">yAxis: <span class="comment">//直角坐标系 grid 中的 y 轴，一般情况下单个 grid 组件最多只能放左右两个 y 轴，多于两个 y 轴需要通过配置 offset 属性防止同个位置多个 Y 轴的重叠。</span></span><br><span class="line"></span><br><span class="line">polar: <span class="comment">// 极坐标系，可以用于散点图和折线图，每个极坐标拥有一个角度轴和一个半径轴</span></span><br><span class="line"></span><br><span class="line">radiusAxis: <span class="comment">//极坐标系的径向轴</span></span><br><span class="line"></span><br><span class="line">angleAxis:  <span class="comment">//极坐标系的角度轴</span></span><br><span class="line"></span><br><span class="line">radar : <span class="comment">// 雷达坐标系组件</span></span><br><span class="line"></span><br><span class="line">dataZoom: <span class="comment">// 用于区域缩放，从而能自由关注细节的数据信息，或者概览数据整体，或者去除离群点的影响</span></span><br><span class="line"></span><br><span class="line">tooltip: <span class="comment">//提示框组件</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux学习(3)</title>
      <link href="/2017/03/04/redux%E5%AD%A6%E4%B9%A0-3/"/>
      <content type="html"><![CDATA[<h1 id="redux学习-三"><a href="#redux学习-三" class="headerlink" title="redux学习(三)"></a>redux学习(三)</h1><p>基本快把react-redux都看完了，还差最后的几部。</p><h2 id="lt-Provider-gt-组件"><a href="#lt-Provider-gt-组件" class="headerlink" title="&lt;Provider&gt;组件"></a><code>&lt;Provider&gt;</code>组件</h2><p>connect方法生成容器组件后，需要让容器组件拿到state对象，才能生成ui组件的参数</p><p>一种解决方法就是将state对象作为参数，传入容器组件。但是，这样做比较麻烦，尤其是容器组件可能在很深的层级，一级<br>级将state传下去就很麻烦</p><p>使用了provider组件后，可以让容器组件拿到state<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(todoApp);</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p><p>上面的例子当中，使用<code>provider</code>组件在根组件外面包了一层，这样一来，app的所有组件就默认可以拿到state了</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux学习2</title>
      <link href="/2017/03/03/redux%E5%AD%A6%E4%B9%A02/"/>
      <content type="html"><![CDATA[<h1 id="react-redux学习"><a href="#react-redux学习" class="headerlink" title="react-redux学习"></a>react-redux学习</h1><p>react-redux是一个专门用于在react项目中使用redux的一个库，<br>而且还有一定的规范和写法的推荐。还有额外的api需要去学习。</p><h2 id="组件规范"><a href="#组件规范" class="headerlink" title="组件规范"></a>组件规范</h2><h3 id="ui组件"><a href="#ui组件" class="headerlink" title="ui组件"></a>ui组件</h3><p>首先react-redux将所有的组件分成了两大类：ui组件和容器组件</p><ul><li>UI组件只负责样式和ui</li><li>所有数据都由props来传递</li><li>不使用任何的redux</li></ul><h3 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h3><ul><li>管理所有的</li><li>使用redux<a id="more"></a><h3 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h3></li></ul><p>react-redux提供了一个connect方法 ，用来从ui组件生成一个容器组件</p><p>但是，如果只是简单的进行了对UI组件的包装的，并没有太多的作用，为了定义业务逻辑，需要给出下面两方面的信息。</p><ol><li>输入逻辑: 外部的数据(即state对象)如何转换为UI组件的参数</li><li>输出逻辑: 用户发出的动作如何变为Action对象，从UI组件传出去</li></ol><p>完整的API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><p>上面两个参数就是对应了输入逻辑和输出逻辑</p><p>前者负责输入逻辑，即将state映射到ui组件的参数(props)<br>后者负责输出逻辑，将用户对ui组件的操作映射成action</p><h3 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps()"></a>mapStateToProps()</h3><p><code>mapStateToProps</code> 是一个函数。它的作用就是像它的名字那样，建立一个从(外部的)<code>state</code>对象到 (UI组件的) <code>props</code>对象的映射关系</p><p>看一个count的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: state.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>mapStateToProps</code> 是一个fun ，它接收一个<code>state</code>作为参数，并且返回了一个obj，这个obj有一个counter属性，代表了ui组件当中的同名参数，然后这里也可以自己自定义一个fun去计算返回一个obj</p><p><code>mapStateToProps</code>会订阅<code>store</code>，每当你的<code>state</code>更新的时候，就会自动执行，重新计算ui组件的参数，从而触发ui组件的重新渲染。而不需要使用<code>subscribe</code>这个方法了</p><p>除了可以传一个参数state以外，还可以使用第二个参数，代表容器组件的props对象<br>然后容器组件的参数发生变化，也会引发UI组件的重新渲染</p><h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps()"></a>mapDispatchToProps()</h3><p><code>mapDispatchToProps</code>是connect的第二个参数，用来建立UI组件的参数到<code>store.dispatch</code>方法的映射，<br>定义了ui组件发出action的方法</p><p>如果<code>mapDispatchToProps</code>是一个对象，它的每个键名也就是对应ui组件的同名参数，数值应该是一个函数，会被当做Action creator，返回的Action 会由redux自动发出，eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  onClick: <span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">    type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">    filter: filter</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的就是一个例子，上面的<code>mapDispatchToProps</code>这个对象当中的onClick这个键值其实就是一个UI组件的props</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux学习(1)</title>
      <link href="/2017/02/27/redux%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<h1 id="Redux学习"><a href="#Redux学习" class="headerlink" title="Redux学习"></a>Redux学习</h1><p>因为我最先掌握的是vuex，反过头来去看学习成本相对较高的redux，可能效果会好一点。</p><p>redux是JavaScript状态容器，提供了可预测化的状态管理</p><p>redux由flux演变而来，但受elm的启发，避开了flux的复杂性</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>应用当中的所有<code>state</code>都是以一个对象树的形式存储在一个一个单一的<code>store</code>当中，唯一改变<code>state</code>的办法就是触发<code>action</code>，一个描述发生什么的对象，为了描述<code>action</code>如何改变<code>state</code>树，你需要去编写<code>reducers</code><br><a id="more"></a></p><h2 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h2><p>redux可以用这三个基本原则来描述：</p><h3 id="1-单一数据源"><a href="#1-单一数据源" class="headerlink" title="1.单一数据源"></a>1.单一数据源</h3><p>整个应用的state被存储在一棵 object tree中，并且这个object tree只存在于唯一一个store中。</p><h3 id="2-state是只读的"><a href="#2-state是只读的" class="headerlink" title="2.state是只读的"></a>2.state是只读的</h3><p>唯一改变state的方法就是触发action，action是一个用于描述已发生事件的普通对象</p><h3 id="3-使用纯函数来执行修改"><a href="#3-使用纯函数来执行修改" class="headerlink" title="3.使用纯函数来执行修改"></a>3.使用纯函数来执行修改</h3><p>为了描述action如何改变state tree ，你需要编写reducers。</p><p>reducer只是一些纯函数，它接收先前的state和action，并返回新的state。刚开始你可以只有一个reducer，随着应用的变大，你可以把它拆成多个小的<br>reducers，分别独立操作state tree的不同部分</p><h3 id="redux的一般写法"><a href="#redux的一般写法" class="headerlink" title="redux的一般写法"></a>redux的一般写法</h3><p>层次:</p><ul><li>首先一般的redux要分为component和reducer两部分</li><li>component当中只负责ui的设计，里面所有的方法和数据全部写成props，暴露给上层去调用</li><li>reducer负责接收state和action两个参数，然后根据action的type属性进行不同的操作，返回不同的state</li><li>最终使用redux当中的一个叫做<code>createStore</code>方法来生成store，参数就是上面的reducer</li><li>然后在给子component传props的时候，调用store当中的dispatch方法来改变state，参数需要传action(因为state的初始值已经给出，不需要传)</li></ul><p>但是这种普通的redux写法只能运用于特别简单的应用当中，如果要用到一个大型的react项目当中配合react-router一起使用，就要用到<code>react-redux</code>了</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-router学习(2)</title>
      <link href="/2017/02/27/react-router-2/"/>
      <content type="html"><![CDATA[<h1 id="react-router学习-2"><a href="#react-router学习-2" class="headerlink" title="react router学习(2)"></a>react router学习(2)</h1><h2 id="路由匹配原理"><a href="#路由匹配原理" class="headerlink" title="路由匹配原理"></a>路由匹配原理</h2><p>路由有三个属性来决定是否匹配一个url</p><ol><li>嵌套关系</li><li>它的路径语法</li><li>它的优先级</li></ol><h3 id="嵌套关系"><a href="#嵌套关系" class="headerlink" title="嵌套关系"></a>嵌套关系</h3><p>React Router 使用路由嵌套的概念来让你定义 view 的嵌套集合，当一个给定的 <code>URL</code><br> 被调用时，整个集合中（命中的部分）都会被渲染。嵌套路由被描述成一种树形结构。<br> <code>React Router</code> 会深度优先遍历整个路由配置来寻找一个与给定的 <code>URL</code> 相匹配的路由。</p><h3 id="它的路径语法"><a href="#它的路径语法" class="headerlink" title="它的路径语法"></a>它的路径语法</h3><ul><li>:paramName 匹配一段位于<code>/</code>、<code>?</code>、<code>#</code>之后的url，命中的部分将被作为参数</li><li>()  在它内部的内容被认为是可选的</li><li><ul><li>匹配任意字符(非贪婪的)直到命中下一个字符或者整个url的末尾，并创建一个<code>splat</code>参数</li></ul></li></ul><h3 id="它的优先级"><a href="#它的优先级" class="headerlink" title="它的优先级"></a>它的优先级</h3><p>路由算法会根据定义的顺序自顶向下匹配路由。因此，当你拥有两个兄弟路由节点配置时，你必须确认前一个路由不会匹配后一个路由中的路径。 例如，千万不要这么做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/comments"</span> ... /&gt;</span><br><span class="line">&lt;Redirect <span class="keyword">from</span>=<span class="string">"/comments"</span> ... /&gt;</span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>History用来去监听浏览器地址栏的变化，并解析这个url转化为location对象，然后router使用它去匹配路由，然后渲染相应的组件</p><h3 id="History的模式"><a href="#History的模式" class="headerlink" title="History的模式"></a>History的模式</h3><p>常用的有三种，当然你也可以去自定义</p><ol><li>browserHistory</li><li>hashHistory</li><li>createMemoryHistory</li></ol><p>用法：</p><p>你先从react-router当中引用他们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br></pre></td></tr></table></figure><p>然后将它们传递给<code>&lt;Router&gt;</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="browserHistory"><a href="#browserHistory" class="headerlink" title="browserHistory"></a>browserHistory</h2><p>browserHistory是用的比较多的一种模式 它使用浏览器中的historyAPI用于处理URL，创建一个真实的url</p><p>看到这里正好还解决了我一个肯长时间百思不得其解的问题，就是我vue写的项目打包放到Nginx服务器上面后，路由匹配会报错，然后按照<br>这里给Nginx反向代理的方法重新配置了服务器，发现错误就解决了。</p><h2 id="hashHistory"><a href="#hashHistory" class="headerlink" title="hashHistory"></a>hashHistory</h2><p>hashHistory 使用url中的hash(#)部分去创建形如 example.com/#/some/path 的路由。<br>但由于有一个<code>#</code>号 所以看起来会比较丑，所以不建议线上使用</p><h2 id="createMemoryHistory"><a href="#createMemoryHistory" class="headerlink" title="createMemoryHistory"></a>createMemoryHistory</h2><p>Memory History不会在地址栏被操作或读取。</p><p>它非常适合测试和其他的渲染环境(React Native)</p><p>和另外两种history的一点不同的是你必须创建它，这种方式便于测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> history = createMemoryHistory(location)</span><br></pre></td></tr></table></figure><h2 id="Index-Links"><a href="#Index-Links" class="headerlink" title="Index Links"></a>Index Links</h2><p>除了路由有默认的 link也有，如果你使用了<code>&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;</code>,它会一直处于激活状态，<br>因为所以的url的开头都是<code>/</code>。这个确实是个问题，因为我们仅仅希望在<code>home</code>被渲染后，激发并链接到它</p><p>如果需要在<code>home</code>路由被渲染后才激活 就用<code>&lt;IndexLink to=&quot;/&quot;&gt;Home&lt;/IndexLink&gt;</code></p><p>就先记这么多，以后遇到坑在补</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-router学习(1)</title>
      <link href="/2017/02/27/react-router%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<h1 id="react-router学习"><a href="#react-router学习" class="headerlink" title="react-router学习"></a>react-router学习</h1><p>关于配置什么的 请自行移至百度，下面就记录一下如何使用react-router</p><p>有关react-router的内容都是从这里学习和摘抄的：   <a href="http://www.uprogrammer.cn" target="_blank" rel="noopener">react中文文档</a> </p><p>先写一个简单的例子来解释一下如何编写路由配置:<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"><span class="keyword">const</span> App = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span>about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const About = React.createClass(&#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return &lt;h3&gt;About&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Inbox = React.createClass(&#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;Inbox&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children || "</span>Welcome to your Inbox<span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Message = React.createClass(&#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return &lt;h3&gt;Message &#123;this.props.params.id&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">React.render((</span></span><br><span class="line"><span class="string">  &lt;Router&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;App&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>inbox<span class="string">" component=&#123;Inbox&#125;&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>messages/:id<span class="string">" component=&#123;Message&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">), document.body)</span></span><br></pre></td></tr></table></figure></p><p>这里，最下面的render就是路由配置的一个具体的格式，其中主路由 <code>&#39;/&#39;</code> 是匹配的 <code>App</code>这个组件<br>紧接着 <code>about</code> 和 <code>inbox</code> 是 <code>App</code> 的子组件 他们显示的位置就是 <code>this.props.children</code>的位置<br>他们会在路由匹配成功后显示在对应的位置上面<br>然后是<code>inbox</code>里面的又一个子路由，这个路由还待了一个参数id，会跟着路由传过来，就是说 我们匹配到<code>/inbox/messages/xxx</code> 的时候 message这个组件就会被渲染出来，而且对应的<code>this.props.params.id</code><br>也就是<code>xxx</code></p><h2 id="添加首页"><a href="#添加首页" class="headerlink" title="添加首页"></a>添加首页</h2><p>仅仅这样写是不够的，比方说我没有给出子路由的时候<code>this.props.children</code>就是undefined<br>这个时候我们就应该加入一个默认的路由去渲染，我们可以使用<code>IndexRouter</code> 来设置默认的页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Dashboard = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Welcome to the app!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">      &#123;<span class="comment">/* 当 url 为/时渲染 Dashboard */</span>&#125;</span><br><span class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Route&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.body)</span></span><br></pre></td></tr></table></figure><p>这样的话 当我们的url是<code>/</code>时，我们渲染的子路由 <code>this.props.children</code>的位置就是<code>Dashboard</code> 这个路由</p><p>如果我们想要将 <code>/inbox</code> 从 <code>/inbox/messages/:id</code>中去除，并且还能够让 <code>Message</code> 嵌套在 <code>App -&gt; Inbox</code> 中渲染，那会非常赞。绝对路径可以让我们做到这一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/* 使用 /messages/:id 替换 messages/:id */</span>&#125;</span><br><span class="line">        &lt;Route path=<span class="string">"/messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Route&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.body)</span></span><br></pre></td></tr></table></figure><p>这样，我们的绝对路径就写好了，匹配<code>/messages/:id</code> 会依次渲染 <code>App -&gt; Inbox -&gt; Message</code></p><p>但是，这时候又有了新的问题,当我们访问<code>/inbox/messages/5</code>的时候 我们就会看到错误，<br>这个的解决办法就是路由的重定向，我们使用<code>&lt;Redirect&gt;</code>来使这个url重新工作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line"></span><br><span class="line">        &#123;<span class="comment">/* 跳转 /inbox/messages/:id 到 /messages/:id */</span>&#125;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"messages/:id"</span> to=<span class="string">"/messages/:id"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Route&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.body)</span></span><br></pre></td></tr></table></figure><p>这样的话，无论任何人点击<code>/inbox/messages/5</code>这个链接，它最终都会被重定向到<code>/messages/5</code>这个url上面  </p><h2 id="进入和离开的钩子"><a href="#进入和离开的钩子" class="headerlink" title="进入和离开的钩子"></a>进入和离开的钩子</h2><p><code>Router</code> 可以定义 <code>onEnter</code> 和 <code>onLeave</code> 两个钩子 ，这两个钩子会在页面跳转时触发，在验证权限的时候特别有用<br>，在路由跳转过程当中，<code>onLeav</code> 钩子会在所有将离开的路由中触发，从最下层的子路由开始直到最外层父路由结束。然后<code>onEnter</code> 钩子会从最外层的父路由开始直到最下层子路由结束</p><p>继续我们上面的例子，如果一个用户点击链接，从 /messages/5 跳转到 /about，下面是这些 hook 的执行顺序：</p><ul><li>/messages/:id 的 onLeave</li><li>/inbox 的 onLeave</li><li>/about 的 onEnter</li></ul>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>weex小记</title>
      <link href="/2017/02/23/weex%E5%B0%8F%E8%AE%B0/"/>
      <content type="html"><![CDATA[<h1 id="weex学习-一"><a href="#weex学习-一" class="headerlink" title="weex学习(一)"></a>weex学习(一)</h1><p>上个学期学校实验周要求做一个项目，就考虑做个native端的，当时weex还不怎么稳定，看了半天网上的资料还是研究不出到底如何从构建到编译、打包，<br>于是用了React Native，但是由于react本身学习成本的问题，做的并不精致，好多东西都没用进去。 在公司实习的这段时间，公司的新项目都使用vue，在这个3个多月的时间当中，基本<br>学会了vue的整个概念和它的一些生态库，比方说vue-router和vuex，然后自己也了解了webpack打包编译的机制<br>，还将nodejs后端的koa自己写到了一个个人的小项目里面： <a href="https://github.com/BosenY/koa2-vue2" target="_blank" rel="noopener">vue2-koa2的小demo</a><br>感觉使用vue要比react清爽多了(关键还是学习成本低，上限还高)，现在看weex官方已经支持了vue语法编译，所以就学一下，准备毕设就拿这个开题。  </p><p>关于weex和vue： Vue.js 是 Evan You 开发的渐进式 JavaScript 框架，在易用性、灵活性和性能等方面都非常优秀。开发者能够通过撰写 *.vue 文件，基于 &lt;template&gt;, &lt;style&gt;, &lt;script&gt;   快速构建组件化的 web 应用。<br>Vue.js 在 2016 年 10 月正式发布了 2.0 版本，该版本加入了 Virtual-DOM 和预编译器的设计，使得该框架在运行时能够脱离 HTML 和 CSS 解析，只依赖 JavaScript；同时 Virtual-DOM 也使得 Vue 2.x 渲染成原生 UI 成为了可能。<br> <a id="more"></a><br>weex就相对于react 和react native ，它就是vue的native版本，同时更加强大的是，它可以同时编译渲染web、android、ios三端。    </p><p>目前 Weex 与 Vue 正在展开官方合作，并将 Vue 2.x 作为内置的前端框架，Vue 也因此具备了开发原生应用的能力。</p><h2 id="关于起步"><a href="#关于起步" class="headerlink" title="关于起步"></a>关于起步</h2><p>由于我也是刚起步，不太能说明白，我是看的饿了么前端的一个妹子大神的教程才跟着一步一步配置出来的，链接在此:  </p><ul><li><a href="https://zhuanlan.zhihu.com/p/25177344" target="_blank" rel="noopener">快速开始weex之旅</a> </li><li><a href="https://zhuanlan.zhihu.com/p/25227030" target="_blank" rel="noopener">Weex 入坑指南：手把手编译 Playground</a> </li></ul><p>我是直接把weex团队的weex-hacknews改了一下，就可以成为自己开发时候的一个基础架子了。<br>然后可以自己去配置一下router、vuex等等的东西，然后编译调试打包。。。</p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue组件</title>
      <link href="/2017/02/22/vue%E7%BB%84%E4%BB%B6/"/>
      <content type="html"><![CDATA[<h1 id="vue组件开发-轮播图"><a href="#vue组件开发-轮播图" class="headerlink" title="vue组件开发-轮播图"></a>vue组件开发-轮播图</h1><p>今天自己写了一个轮播图的组件，在这里记录一下开发的具体流程</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先轮播图的一个关键就是定位和布局，如下图：<br><img src="http://p1.bpimg.com/567571/bcdda05709b61bee.png" alt=""></p><p>这里就是分几个部分：</p><ul><li>图片</li><li>左右的按钮</li><li>底部的定位按钮</li></ul><p>首先是图片，图片的写法是将所有的图片放在一个父级div当中，然后使用flex布局使他们处于同一排，然后图片的显示区域只有一个图片的大小，<br>这样处于试图当中就只有一张图</p><p>接下来是左右的按钮，左右的按钮布局是用到了position:absolute 只要给父元素的div的样式当中加入相对布局,然后根据上下左右的定位和transform定位同时去控制，这样就保证了位置</p><p>底部的定位按钮的写法也是一样的</p><a id="more"></a><h2 id="逻辑和功能的实现"><a href="#逻辑和功能的实现" class="headerlink" title="逻辑和功能的实现"></a>逻辑和功能的实现</h2>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongodb存图片</title>
      <link href="/2017/02/21/monggo/"/>
      <content type="html"><![CDATA[<h1 id="mongodb存储图片"><a href="#mongodb存储图片" class="headerlink" title="mongodb存储图片"></a>mongodb存储图片</h1>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eggjs学习(一)</title>
      <link href="/2017/02/16/eggjs-1/"/>
      <content type="html"><![CDATA[<h1 id="eggjs"><a href="#eggjs" class="headerlink" title="eggjs"></a>eggjs</h1><h2 id="什么是eggjs"><a href="#什么是eggjs" class="headerlink" title="什么是eggjs"></a>什么是eggjs</h2><p>eggjs 是一个企业级的koa框架，相对于普通的koa，他有以下的一些优势：  </p><ul><li>深度框架定制</li><li>高度可扩展的插件机制</li><li>内置多进程管理</li><li>基于koa开发，性能优异</li><li>框架稳定，测试覆盖率高</li><li>渐进式开发</li></ul><p>注意：是基于koa1的<br><a id="more"></a><br>未完待续</p>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
            <tag> eggjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>17年学习计划</title>
      <link href="/2017/01/27/17%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
      <content type="html"><![CDATA[<h1 id="16年成果"><a href="#16年成果" class="headerlink" title="16年成果"></a>16年成果</h1><p>今年总的来说已经达到了自己的目标，目前已经从一个只会一点前端发展到了前后端已经可以独立架构。<br>目前所学会的技术如下：</p><ul><li>前端： vue、react(尚未熟练)、react native、weex、各种库(vuex、vue-router、fetch、axios、lodash、d3)…</li><li>后端： express、koa2、mongodb…</li></ul><h1 id="17年计划"><a href="#17年计划" class="headerlink" title="17年计划"></a>17年计划</h1><p>实习2个多月，感觉自己最薄弱的就是有关移动端的样式、事件等，准备加大力度学习移动端所有知识和框架，比如：react native、weex等等，然后vue的服务端渲染也要彻底掌握，还有那个新出的vuessr框架nuxt，感觉这个东西会火，然后就是各种后端的东西，虽然<br>说已经可以写一个完整的后端接口，但是还没有完善化，比方说加密方面和安全方面，都还是有待提高的，并且也不能仅限于nodejs，准备把php的thinkphp框架学起来，结合vue使用~</p>]]></content>
      
      <categories>
          
          <category> 个人小纪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack2学习(五)</title>
      <link href="/2017/01/22/webpack-5/"/>
      <content type="html"><![CDATA[<h1 id="模块热替换-Hot-Module-Replacement"><a href="#模块热替换-Hot-Module-Replacement" class="headerlink" title="模块热替换(Hot Module Replacement)"></a>模块热替换(Hot Module Replacement)</h1><p>模块热替换功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载页面。这使得你可以在独立模块变更后，<br>无需刷新整个页面，就可以更新这些模块，极大地加速了开发时间。</p><ul><li>站在app角度<ol><li>app代码要求HMR runtime检查更新</li><li>HMR runtime(异步) 下载更新，然后通知app代码更新可用</li><li>app代码要求HMR runtime 应用更新</li></ol></li></ul>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack2学习(四)</title>
      <link href="/2017/01/22/webpack-4/"/>
      <content type="html"><![CDATA[<h1 id="加载器-loaders"><a href="#加载器-loaders" class="headerlink" title="加载器(loaders)"></a>加载器(loaders)</h1><p>loader 是对应用程序中资源文件进行转换。它们是(运行在node.js中的) 函数，可以将资源文件作为参数的来源，然后返回新的资源文件<br>例如，你可以使用loader告诉webpack加载css文件，或者将TypeScript转化为JavaScript</p><h2 id="loader特性"><a href="#loader特性" class="headerlink" title="loader特性"></a>loader特性</h2><ul><li>loader支持链式传递。能够对资源使用流水线(pipeline)。 loader链式按照时间先后顺序进行编译。<br>loader链中的第一个loader返回值给下一个loader，并且在最后一个loader，webpack按照预期的JavaScript返回</li><li>loader可以是同步或者是异步函数。</li><li>loader运行在node.js中，并且能够执行任何可能的操作。</li><li>loader接受查询参数。用于loader间传递配置。</li><li>loader也能够使用  <code>options</code>对象进行配置</li><li>除了使用package.json的main属性，还可以将普通的npm模块导出为loader，做法是在package.json里定义一个loader字段</li><li>插件可以给loader带来更多的功能</li><li>loader能够产生额外的任意文件</li></ul><p>loader通过(loader)预处理函数，为JavaScript生态系统提供了更多有利功能。用户现在可以更加灵活的引入细粒度逻辑，例如压缩、打包、语言翻译和其他<br><a id="more"></a></p><h2 id="解析loader"><a href="#解析loader" class="headerlink" title="解析loader"></a>解析loader</h2><p>loader解析类似于模块，loader模块需要导出一个函数，并且使用兼容node.js的JavaScript编写。在通常情况下，你可以使用npm管理loader，但是你也可以在应用程序中将loader作为文件去使用</p><h2 id="引用loader"><a href="#引用loader" class="headerlink" title="引用loader"></a>引用loader</h2><p>loader通常被命名为xxx-loader ，xxx是上下文的名称  eg： json-loader</p><p>load的名称约定和优先搜索顺序，由webpack配置API中的resolveLoader、moduleTemplates定义</p><hr><h1 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h1><p>webpack本身也是构建于同样的插件系统<br>插件的目的在于解决loader无法实现的事情</p><h2 id="解剖"><a href="#解剖" class="headerlink" title="解剖"></a>解剖</h2><p>webpack插件是一个具有apply属性的JavaScript对象。apply属性会被webpack解析器(compiler)调用，并且可在整个编译生命周期(compilation lifecycle)访问。</p><p>ConsoleLogOnBuildWebpackPlugin.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConsoleLogOnBuildWebpackPlugin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ConsoleLogOnBuildWebpackPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  compiler.plugin(<span class="string">'run'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compiler, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The webpack build process is starting!!!"</span>);</span><br><span class="line"></span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack2学习(三)</title>
      <link href="/2017/01/22/webpack-3/"/>
      <content type="html"><![CDATA[<h1 id="输出output"><a href="#输出output" class="headerlink" title="输出output"></a>输出output</h1><p>output选项控制webpack如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>设置<code>output</code>属性，只需要在你的webpack配置简单的设置输出值：</p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  output: <span class="string">'bundle.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>下面是一些output的属性：</p><h3 id="output-filename"><a href="#output-filename" class="headerlink" title="output.filename"></a>output.filename</h3><pre><code>指定硬盘每个输出文件的名称。在这里你不能指定绝对路径！ `output.path`选项规定了文件被写入硬盘的位置。 filename 仅用于命名每个文件。</code></pre><p>单个入口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: <span class="string">'./src/app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/build'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入到硬盘：./build/bundle.js</span></span><br></pre></td></tr></table></figure></p><p>多个入口</p><p>如果你的配置创建了多个<code>chunk</code>(例如使用多个入口点或使用类似CommonsChunkPlugin的插件)，<br>你应该使用以下的替换方式来确保每个文件名都不重复。</p><ul><li>[naem] 被chunk 的name 替换</li><li>[hash] 被编译(compilation) 的hash替换</li><li>[chunkhash] 被chunk 的hash 替换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    search: <span class="string">'./src/search.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/build'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入到硬盘：./build/app.js, ./build/search.js</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="output-hotUpdateChunkFilename"><a href="#output-hotUpdateChunkFilename" class="headerlink" title="output.hotUpdateChunkFilename"></a>output.hotUpdateChunkFilename</h3><p>热更新块(Hot Update Chunk)的文件名。 他们在<code>output.path</code> 目录中</p><ul><li>[id] 被chunk的id替换</li><li><p>[hash] 被编译(compilation)的hash替换。 (最后一个hash存储在记录中)</p><pre><code>默认值： &quot;[id].[hash].hot-update.js&quot;</code></pre></li></ul><h3 id="output-hotUpdateFunction"><a href="#output-hotUpdateFunction" class="headerlink" title="output.hotUpdateFunction"></a>output.hotUpdateFunction</h3><p>webpack 用于异步加载(async loading)热更新块(hot update chunk)的 JSONP 函数。</p><p>….还有好多就不详细记录了，具体去官网看吧，下面记录一个重点的：</p><h3 id="output-path"><a href="#output-path" class="headerlink" title="output.path"></a>output.path</h3><p>以绝对路径作为导出目录(必选项)</p><p>[hash] 被编译(compilation)的 hash 替换。</p><p>config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: <span class="string">"/home/proj/public/assets"</span>,</span><br><span class="line">    publicPath: <span class="string">"/assets/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/assets/spinner.gif"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接下来是一个更复杂的例子，来说明对资源使用 CDN 和 hash。</p><p>config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: <span class="string">"/home/proj/cdn/assets/[hash]"</span>,</span><br><span class="line">    publicPath: <span class="string">"http://cdn.example.com/assets/[hash]/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="output-sourceMapFilename"><a href="#output-sourceMapFilename" class="headerlink" title="output.sourceMapFilename"></a>output.sourceMapFilename</h3><p>javascript文件SourceMap的文件名。 它们在output.path目录中。</p><ul><li>[file] 被JavaScript文件的文件名替换</li><li>[id] 被chunk的id替换</li><li><p>[hash] 被编译的(compilation)的hash替换</p><pre><code>默认值：&quot;[file].map&quot;</code></pre></li></ul>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack2学习(二)</title>
      <link href="/2017/01/22/webpack-2/"/>
      <content type="html"><![CDATA[<h1 id="entry入口起点"><a href="#entry入口起点" class="headerlink" title="entry入口起点"></a>entry入口起点</h1><h2 id="单入口写法"><a href="#单入口写法" class="headerlink" title="单入口写法"></a>单入口写法</h2><p>用法： <strong>entry： string|Array(string)</strong></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><p>entry 属性的单入口语法：</p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">      main:<span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h2><p>用法：entry: {[entryChunkName: string]: string|Array(string)}</p><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是应用程序中定义入口的最可扩展的方式</p><p>webpack的可扩展配置是可重用的，并且可以与其他配置组合使用，这是一种流行的技术，用于将关注点从环境、构建目标、运行时中分离，<br>然后使用专门的工具把它们合并在一起</p><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><h3 id="入口分离-应用-app-和-公共库-vendor"><a href="#入口分离-应用-app-和-公共库-vendor" class="headerlink" title="入口分离 应用(app) 和 公共库(vendor)"></a>入口分离 应用(app) 和 公共库(vendor)</h3><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这告诉了我们webpack从app.js和vendors.js开始创建依赖图表。这些图表是完全分离的、互相独立的。在只有一个入口起点(不包括公共库)的单页面应用(spa)当中比较常见</p><p>此设置允许你使用CommonsChunkPlugin并从 app 包 提取 公共引用(vendor reference) 到 vendor 包，并把公共引用的部分替换为 <strong><strong>webpack_require</strong>()</strong>调用。如果应用包中了没有公共代码，那么你可以在 webpack 中实现被称为 长效缓存的通用模式。  </p><h3 id="多页应用"><a href="#多页应用" class="headerlink" title="多页应用"></a>多页应用</h3><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">    pageTwo: <span class="string">'./src/pageTwo/index.js'</span>,</span><br><span class="line">    pageThree: <span class="string">'./src/pageThree/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里webpack 需要3个独立分离的依赖图表</p><p>在多页面应用中，服务器将为您获取一个新的html文档，页面重新加载新文档，并且资源被重新下载。然而，这给了我们独特的机会去做很多事：</p><ul><li>使用 CommonsChunkPlugin 为每个页面间的应用共享代码创建 bundle。由于入口起点增多，多页应用能够在入口起点重用大量代码/模块，这样可以极大的从这些新技术受益。</li><li>根据经验：每个 HTML 文档只使用一个入口起点。</li></ul>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack2学习(一)</title>
      <link href="/2017/01/22/webpack-1/"/>
      <content type="html"><![CDATA[<h1 id="webpack2学习（一）"><a href="#webpack2学习（一）" class="headerlink" title="webpack2学习（一）"></a>webpack2学习（一）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>是一个现代JavaScript应用模块打包器</p><h2 id="四个核心概念"><a href="#四个核心概念" class="headerlink" title="四个核心概念"></a>四个核心概念</h2><ol><li><p>入口(Entry)  </p><p> webpack 将创建所有应用程序依赖关系图表(dependency graph)。图表的起点被称之为入口起点(entry point)。入口起点告诉 webpack 从哪里开始，并遵循着依赖关系图表知道打包什么。可以将您的应用入口起点认为是根上下文(contextual root)或 app 第一个启动文件。<br> <br><br> 在webpack当中使用entry属性来定义入口  </p><p> webpack.config.js：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li><p>出口(Output)</p><p> webpack 的output属性描述了如何处理打包代码<br> webpack.config.js</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 这里的<em>__dirname</em>是指当前模块文件所在目录的完整绝对路径,path定义了打包后出口对应的就是当前目录下的dist文件夹,而打包出来的名字就是底下filename来控制的</p></li></ol><ol><li><p>加载器(Loader)  </p><p> webpack 的目标是，让项目中的所有资源都成为 webpack 的关注点，而浏览器不需要考虑这些（这并不意味着资源都必须打包在一起）。 webpack 把 每个文件(.css, .html, .scss, .jpg, etc.) 都作为模块 处理。然而 webpack 只了解 JavaScript。</p><ul><li>webpack会自己识别出应该被特定的加载器转换的文件</li><li><p>转换能够被添加到依赖图表的文件(并且最终打包) (use属性)</p><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;<span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>module当中定义了<em>rules</em>属性,里面必须包含两个属性：test和use，test告诉了webpack编译器在模块被解析为js或者jsx路径时候，你需要把他们先使用babel-loader转换再去打包</p><p>注意：在 webpack 配置中定义 loader 时，要定义在 module.rules 中，而不是 rules。在定义错时 webpack 会提出严重的警告。</p></li></ul></li><li><p>插件</p><p> 由于加载器仅基于单个文件执行转换，插件最常用(但不限于)在打包模块的编译和分块时执行操作和自定义功能。  </p><p> 插件的目的是为了解决loader无法实现的其他事情</p><p> 使用时，只需要require他们，并且把他们添加到plugins数组。由于会出现多次使用插件，因此要使用<em>new</em>来创建插件的实例，并且调用插件。</p><p> webpack.config.js</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//installed via npm</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//to access built-in plugins</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span>,</span><br><span class="line">    path: <span class="string">'./dist'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;<span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
