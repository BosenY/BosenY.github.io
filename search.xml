<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记一次前端面经]]></title>
    <url>%2F2018%2F05%2F29%2Finterview-exp%2F</url>
    <content type="text"><![CDATA[写在前面作为一个双非一本渣校，还不是应届（去年毕业的），个人还是很想去大公司氛围好的团队（虽然很菜但是还是想去哈哈），然后就选了上海的两件比较不错的去面试：携程和哈罗单车。 携程我是在 Boss 直聘上投的，因为公司业务也算是和携程相近，所以就想试试，投的第二天就收到了 hr 的信息，然后简单聊了几个问题：你简历上怎么写的毕业后至今职位是打杂？（下次不会这样了，就是自嘲一下的） 跟 hr 解释了一番之后，邀请了去面试。 一大早去的凌空 soho，感觉满满的一股互联网的年轻气息，人山人海。 到了之后联系 hr，hr 小姐姐相当热情，告诉我指示以后跟着指示进了办公区，然后开始等面试官，大约等了半个多小时（反正我倒也无所谓），面试官开完会终于来了，态度挺不错的，然后先让我做个自我介绍，我就总结了一下现在手头的一些工作之类的。然后就进入正式的面试环节了： 问的基本都是原生 js 的东西，就把自己能记住的写下来： 什么是闭包？(说了点闭包，然后还有闭包的 gc) ajax 实现（就是 XMLHttpRequest 那里的东西) 给你一个移动端翻页的需求，你会怎么做？（监听滚动到底部，讲了一下节流函数，然后还有图片懒加载，然后弄个动画之类的) cookie 和 storage 区别 事件捕获和事件冒泡（这里记得不清楚了，就答了一个捕获是由外到内，冒泡是由内到外） 跨域，优化（我顺带还把 cors 然后携带 cookie 那里说了一下） 总结下你能想到的操作 dom 的方法(jq 的、document 上的 getElementById/ClassName/TagName/Name，还有 querySelector、querySelectorAll 就想起这些) setTimeout 的运行机制（eventloop 机制） 说一下 dom 上面的属性的功能和用途（把 vue 里面所用的讲了一下） 如何实现一个数据驱动（又把 vue 的讲了一下哈哈） 在调试一个页面的时候鼠标一直在闪，你会从哪几个方面去找问题的原因 还有的想不起来了，待补充 你还有什么想问的吗 总体来说感觉面得蛮爽也蛮久的，最后谈了很多关于他们的部门业务还有想招什么样的人，面试官中间也会给一些提示什么的，就是最后那个题感觉比较懵逼，实在不太好答（其实我是想说是不是写了一个无限 reload 之类的才一直闪或者 chrome 内存溢出之类的哈哈） 能够从里面总结一些自己的不足和今后需要努力的，比较细的一个方向吧。 中午出来拍了张照片，随便拍的哈哈： 哈罗单车这里是两面， 而且这次的除了穿插一些 es6es7 的东西以外主要问了好多 vue 当中的东西：（问的挺多的能记住多少写多少吧。。） 一面 vue1 向 2 迁移（没迁移过，只记得钩子函数名称变了，然后还有 sync。） 子向父组件通信（子组件$emit 父组件监听，$parent 访问父组件，sync 修饰符-2.3 加的，然后问 vue1 和 vue2 的 sync 的原理，我知道 2 的其实就是个语法糖，1 没看过，sync 用在解析一个复杂表达式的时候有问题也没去了解） 数组搜索值（includes、indexOf），有啥区别（想了半天最后终于想起来：NaN） typeof、instanceof、Object.defineProperty 这些 es6 有啥不好用 es5 去实现的吗（Symbol、Map、WeakMap 这些，原因巴拉巴拉） seo （然后就巴拉巴拉把 ssr 和 spa 区别啥的都说了，还有 ssr 原理，然后还有确定你的目的性，如果只是部分页面想要 seo，只需要 prerender 并不要 seo 要明白最终目的）  你知道 webpack 吗？说说理解什么的 引一个 lodash 要怎么样打包（CommonsChunkPlugin 来公用模块拆出来，webpack4 不用这个写，在 optimization 写一个 splitChunks） 代码分割（ 用上面的拆分公共模块防止重复，css 也有一个 plugin 去分离，然后用动态导入的方式-&gt; vue-router 懒加载） 最终你发现打包出来有点问题，你会怎么去找问题，怎么看（web 官方文档有，有 3 种方法，还好用过 23333） vue 双向绑定相关（数组那里只能重写数组的方法，因为 Object.defineProperty 没办法去监听数组的 set，然后把 Proxy 说一下，在 set 时候去触发 Dep 的 notify,然后用 return Reflect.set(target, name, value, receiver)） 还有什么想问我的 还有一些忘了，想起来加上 二面二面是 leader 面，问了好多发散性的问题吧，可能自己答得不太好：  你第一个项目负责的部分，主要做了哪些功能 说一下具体的一个实现 你读过哪些源码 简单讲一个你读的最深刻的源码 说一说你读源码的一些心得，你从源码当中  学到了什么 对自己的定位，规划 平常去哪些地方学习、遇到过比较棘手的问题 为什么想跳槽，为什么投我们 还有什么想问我的 面试官很 nice，人也很好，问的问题也相当有深度，就是感觉脑壳像被挖干了一样很难受哈哈]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[koa源码学习]]></title>
    <url>%2F2018%2F04%2F29%2Fkoa-source-code-analysis%2F</url>
    <content type="text"><![CDATA[最近新开了2个repo，一个用来记录一些常用网站：bookmarks，另一个记录对koa源码的理解：LearnNodejs-Koa。 是直接在源码上做的注释。里面还有阅读深入浅出Nodejs的一些理解。 现在开始看Vue的，尽量在理解完写完注释后把要点记录在博客里。 自己以前看不懂的东西拿来重新看，就感觉比以前通透了一些，以后还会继续回头看，哈哈。 五一还是要出去玩玩的，顺便练习一下拍照，毕竟准备要走了，总得把景点赶紧逛完才不留遗憾。]]></content>
      <categories>
        <category>个人小纪</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>后端.</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[koa2-compose学习]]></title>
    <url>%2F2018%2F04%2F16%2Fkoa2-compose%2F</url>
    <content type="text"><![CDATA[最近在一点一点学习koa源码和深入浅出Node.js那本书，因为现在egg也是基于koa2的，而且自己以前做毕设的时候也用过，async/await真的是太好用了；现在新的中间层用egg搭建，所以想彻底把这部分的东西好好系统看一遍。 从开始看先看到了koa的一个构造函数，然后根据Node原生的写法看，它的真正创建服务的代码在listen()当中: 123456789101112131415161718constructor() &#123; super(); this.proxy = false; this.middleware = []; this.subdomainOffset = 2; this.env = process.env.NODE_ENV || 'development'; this.context = Object.create(context); this.request = Object.create(request); this.response = Object.create(response); console.log(this)&#125;listen(...args) &#123; debug('listen'); const server = http.createServer(this.callback()); return server.listen(...args);&#125; 在看深入浅出Node.js那本书里面，知道具体的request和response都是在这个callback里面执行，所以就看这个函数： 123456789101112callback() &#123; const fn = compose(this.middleware); if (!this.listeners('error').length) this.on('error', this.onerror); const handleRequest = (req, res) =&gt; &#123; const ctx = this.createContext(req, res); return this.handleRequest(ctx, fn); &#125;; return handleRequest; &#125; 在这里其实就是返回了一个handleRequest(),继续看： 12345678handleRequest(ctx, fnMiddleware) &#123; const res = ctx.res; res.statusCode = 404; const onerror = err =&gt; ctx.onerror(err); const handleResponse = () =&gt; respond(ctx); onFinished(res, onerror); return fnMiddleware(ctx).then(handleResponse).catch(onerror);&#125; 到这里基本就能看出来它首先执行的就是这个fn，而这个fn又是怎么执行的？ 大家都知道它是洋葱式的处理，然后看了一下是放在一个koa-compose的模块当中，这个模块就仅仅几行代码： 1234567891011121314151617181920212223242526272829303132 function compose (middleware) &#123; if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!') for (const fn of middleware) &#123; if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!') &#125; /** * @param &#123;Object&#125; context * @return &#123;Promise&#125; * @api public */ return function (context, next) &#123; // last called middleware # let index = -1 return dispatch(0) function dispatch (i) &#123; if (i &lt;= index) return Promise.reject(new Error('next() called multiple times')) index = i let fn = middleware[i] if (i === middleware.length) fn = next if (!fn) return Promise.resolve() try &#123; return Promise.resolve(fn(context, function next () &#123; return dispatch(i + 1) &#125;)) &#125; catch (err) &#123; return Promise.reject(err) &#125; &#125; &#125;&#125; 上面几行都是异常处理，真正的逻辑都在这个return的dispatch(0)当中，然后你发现它就是第一个中间件，首先先去做完一部分第一个中间件的事情，然后到了await next()就要去执行第二个，最终就是一个类似洋葱的模型： 12345678910111213Promise.resolve(function(context, next)&#123; //中间件一第一部分代码 await/yield Promise.resolve(function(context, next)&#123; //中间件二第一部分代码 await/yield Promise.resolve(function(context, next)&#123; //中间件三第一部分代码 await/yield next() // ...n个 //中间件三第二部分代码 &#125;()) //中间件二第二部分代码 &#125;()) //中间件一第二部分代码&#125;()) 显而易见这个就是一个洋葱模型，这就是一个简单的koa的中间件调用的实现方式，感觉就可以理解成一个Promise.all() 感觉看完这个，也就对koa的中间件有了一个彻底的认知和理解，那么直接去学习中间件的源码也轻松了很多。]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next-stage]]></title>
    <url>%2F2018%2F03%2F28%2Fnext-stage%2F</url>
    <content type="text"><![CDATA[最近比较忙，也没空弄太多，因为开始搭建和架构公司的一个中间层项目(感觉被委以重任蛮开心的)，用的是阿里开源的eggjs 最近一直再重新温习nodejs一些知识点，以前也就是乱七八糟乱学一通，也没学出个出息来，这次准备看深入浅出nodejs这本书，外加对koa源码进行一个解读，学习一下nodejs框架的一些设计理念。 顺便说一下小程序也发布了1.5.1版本，已经有了很多功能: 比方说可以看pokemon的进化关系，特性等，数据是爬完了，但是需要时间一点一点弄，还得再找时间继续完善 今天抽空把Lap的一些css问题修复了一下，可能是自己都看不下去了吧~ 有空再写，eggjs还是蛮好用的，但是架构公司级的中间层，感觉自己压力蛮大的，还是好好看好好学吧。]]></content>
      <categories>
        <category>个人小纪</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React高阶组件(转)]]></title>
    <url>%2F2018%2F03%2F03%2FReact-high-component%2F</url>
    <content type="text"><![CDATA[前言 本文代码浅显易懂，思想深入实用。此属于react进阶用法，如果你还不了解react，建议从文档开始看起。 我们都知道高阶函数是什么, 高阶组件其实是差不多的用法，只不过传入的参数变成了react组件，并返回一个新的组件. A higher-order component is a function that takes a component and returns a new component. 形如:1const EnhancedComponent = higherOrderComponent(WrappedComponent); 高阶组件是react应用中很重要的一部分，最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。如果你用过redux，那你就一定接触过高阶组件，因为react-redux中的connect就是一个高阶组件。 另外本次demo代码都放在 https://github.com/sunyongjian/hoc-demo 引入先来一个最简单的高阶组件 1234567891011121314import React, &#123; Component &#125; from 'react';import simpleHoc from './simple-hoc';class Usual extends Component &#123; render() &#123; console.log(this.props, 'props'); return ( &lt;div&gt; Usual &lt;/div&gt; ) &#125;&#125;export default simpleHoc(Usual); 1234567891011import React, &#123; Component &#125; from 'react';const simpleHoc = WrappedComponent =&gt; &#123; console.log('simpleHoc'); return class extends Component &#123; render() &#123; return &lt;WrappedComponent &#123;...this.props&#125;/&gt; &#125; &#125;&#125;export default simpleHoc; 组件Usual通过simpleHoc的包装，打了一个log… 那么形如simpleHoc就是一个高阶组件了，通过接收一个组件class Usual，并返回一个组件class。 其实我们可以看到，在这个函数里，我们可以做很多操作。 而且return的组件同样有自己的生命周期，function，另外，我们看到也可以把props传给WrappedComponent(被包装的组件)。 高阶组件的定义我都是用箭头函数去写的，如有不适请参照arrow function 装饰器模式高阶组件可以看做是装饰器模式(Decorator Pattern)在React的实现。即允许向一个现有的对象添加新的功能，同时又不改变其结构，属于包装模式(Wrapper Pattern)的一种 ES7中添加了一个decorator的属性，使用@符表示，可以更精简的书写。那上面的例子就可以改成： 12345678910111213import React, &#123; Component &#125; from 'react';import simpleHoc from './simple-hoc';@simpleHocexport default class Usual extends Component &#123; render() &#123; return ( &lt;div&gt; Usual &lt;/div&gt; ) &#125;&#125; 是同样的效果。当然兼容性是存在问题的，通常都是通过babel去编译的。 babel提供了plugin，高阶组件用的是类装饰器，所以用transform-decorators-legacy 两种形式 属性代理引入里我们写的最简单的形式，就是属性代理(Props Proxy)的形式。通过hoc包装wrappedComponent，也就是例子中的Usual，本来传给Usual的props，都在hoc中接受到了，也就是props proxy。 由此我们可以做一些操作 操作props最直观的就是接受到props，我们可以做任何读取，编辑，删除的很多自定义操作。包括hoc中定义的自定义事件，都可以通过props再传下去。12345678910111213141516import React, &#123; Component &#125; from 'react';const propsProxyHoc = WrappedComponent =&gt; class extends Component &#123; handleClick() &#123; console.log('click'); &#125; render() &#123; return (&lt;WrappedComponent &#123;...this.props&#125; handleClick=&#123;this.handleClick&#125; /&gt;); &#125;&#125;;export default propsProxyHoc; 然后我们的Usual组件render的时候, console.log(this.props) 会得到handleClick. refs获取组件实例当我们包装Usual的时候，想获取到它的实例怎么办，可以通过引用(ref),在Usual组件挂载的时候，会执行ref的回调函数，在hoc中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。 1234567891011121314151617import React, &#123; Component &#125; from 'react';const refHoc = WrappedComponent =&gt; class extends Component &#123; componentDidMount() &#123; console.log(this.instanceComponent, 'instanceComponent'); &#125; render() &#123; return (&lt;WrappedComponent &#123;...this.props&#125; ref=&#123;instanceComponent =&gt; this.instanceComponent = instanceComponent&#125; /&gt;); &#125;&#125;;export default refHoc; 抽离state 这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件（文档），即把input都做成受控的，改变value的时候，用onChange事件同步到state中。当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较。看一下代码就知道怎么回事了：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071// 普通组件Loginimport React, &#123; Component &#125; from 'react';import formCreate from './form-create';@formCreateexport default class Login extends Component &#123; render() &#123; return ( &lt;div&gt; &lt;div&gt; &lt;label id="username"&gt; 账户 &lt;/label&gt; &lt;input name="username" &#123;...this.props.getField('username')&#125;/&gt; &lt;/div&gt; &lt;div&gt; &lt;label id="password"&gt; 密码 &lt;/label&gt; &lt;input name="password" &#123;...this.props.getField('password')&#125;/&gt; &lt;/div&gt; &lt;div onClick=&#123;this.props.handleSubmit&#125;&gt;提交&lt;/div&gt; &lt;div&gt;other content&lt;/div&gt; &lt;/div&gt; ) &#125;&#125;//HOCimport React, &#123; Component &#125; from 'react';const formCreate = WrappedComponent =&gt; class extends Component &#123; constructor() &#123; super(); this.state = &#123; fields: &#123;&#125;, &#125; &#125; onChange = key =&gt; e =&gt; &#123; this.setState(&#123; fields: &#123; ...this.state.fields, [key]: e.target.value, &#125; &#125;) &#125; handleSubmit = () =&gt; &#123; console.log(this.state.fields); &#125; getField = fieldName =&gt; &#123; return &#123; onChange: this.onChange(fieldName), &#125; &#125; render() &#123; const props = &#123; ...this.props, handleSubmit: this.handleSubmit, getField: this.getField, &#125; return (&lt;WrappedComponent &#123;...props&#125; /&gt;); &#125;&#125;;export default formCreate; 这里我们把state，onChange等方法都放到HOC里，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。 反向继承反向继承(Inheritance Inversion)，简称II，本来我是叫继承反转的…因为有个模式叫控制反转嘛…跟属性代理的方式不同的是，II采用通过 去继承WrappedComponent，本来是一种嵌套的关系，结果II返回的组件却继承了WrappedComponent，这看起来是一种反转的关系。通过继承WrappedComponent，除了一些静态方法，包括生命周期，state，各种function，我们都可以得到。上栗子：1234567891011121314151617181920212223242526272829303132333435363738 // usualimport React, &#123; Component &#125; from 'react';import iiHoc from './ii-hoc';@iiHocexport default class Usual extends Component &#123; constructor() &#123; super(); this.state = &#123; usual: 'usual', &#125; &#125; componentDidMount() &#123; console.log('didMount') &#125; render() &#123; return ( &lt;div&gt; Usual &lt;/div&gt; ) &#125;&#125;//IIHOCimport React from 'react';const iiHoc = WrappedComponent =&gt; class extends WrappedComponent &#123; render() &#123; console.log(this.state, 'state'); return super.render(); &#125;&#125;export default iiHoc; iiHoc return的组件通过继承，拥有了Usual的生命周期及属性，所以didMount会打印，state也通过constructor执行，得到state.usual。其实，你还可以通过II： 渲染劫持这里HOC里定义的组件继承了WrappedComponent的render(渲染)，我们可以以此进行hijack(劫持)，也就是控制它的render函数。栗子：1234567891011121314151617181920212223//hijack-hocimport React from 'react';const hijackRenderHoc = config =&gt; WrappedComponent =&gt; class extends WrappedComponent &#123; render() &#123; const &#123; style = &#123;&#125; &#125; = config; const elementsTree = super.render(); console.log(elementsTree, 'elementsTree'); if (config.type === 'add-style') &#123; return &lt;div style=&#123;&#123;...style&#125;&#125;&gt; &#123;elementsTree&#125; &lt;/div&gt;; &#125; return elementsTree; &#125;&#125;;export default hijackRenderHoc;//usual@hijackRenderHoc(&#123;type: 'add-style', style: &#123; color: 'red'&#125;&#125;)class Usual extends Component &#123; ...&#125; 我这里通过二阶函数，把config参数预制进HOC， 算是一种柯理化的思想。栗子很简单，这个hoc就是添加样式的功能。但是它暴露出来的信息却不少。首先我们可以通过config参数进行逻辑判断，有条件的渲染，当然这个参数的作用很多，react-redux中的connect不就是传入了props-key 嘛。再就是我们还可以拿到WrappedComponent的元素树，可以进行修改操作。最后就是我们通过div包裹，设置了style。但其实具体如何操作还是根据业务逻辑去处理的… 我的应用场景 通常我会通过高阶组件去优化之前老项目写的不好的地方，比如两个页面UI几乎一样，功能几乎相同，仅仅几个操作不太一样，却写了两个耦合很多的页面级组件。当我去维护它的时候，由于它的耦合性过多，经常会添加一个功能(这两个组件都要添加)，我要去改完第一个的时候，还要改第二个。而且有时候由于我的记性不好，会忘掉第二个… 就会出现bug再返工。更重要的是由于个人比较懒，不想去重构这部分的代码，因为东西太多了，花费太多时间。所以加新功能的时候，我会写一个高阶组件，往HOC里添加方法，把那两个组件包装一下，也就是属性代理。这样新代码就不会再出现耦合，旧的逻辑并不会改变，说不定哪天心情好就会抽离一部分功能到HOC里，直到理想的状态。 另一种情况就是之前写过一个组件A，做完上线，之后产品加了一个新需求，很奇怪要做的组件B跟A几乎一模一样，但稍微有区别。那我可能就通过II的方式去继承之前的组件A，比如它在didMount去fetch请求，需要的数据是一样的。不同的地方我就会放到HOC里，存储新的state这样，再通过劫持渲染，把不同的地方，添加的地方进行处理。但其实这算Hack的一种方式，能快速解决问题，也反映了组件设计规划之初有所不足(原因比较多)。 Container解决不了的时候甚至不太优雅的时候。其实大部分时候包一层Container组件也能做到差不多的效果，比如操作props，渲染劫持。但其实还是有很大区别的。比如我们现在有两个功能的container，添加样式和添加处理函数的，对Usual进行包装。栗子： 123456789101112//usualclass Usual extends Component &#123; render() &#123; console.log(this.props, 'props'); return &lt;div&gt; Usual &lt;/div&gt; &#125;&#125;;export default Usual;//console - Object &#123;handleClick: function&#125; "props" 1234567891011121314import React, &#123; Component &#125; from 'react';import Usual from './usual';class StyleContainer extends Component &#123; render() &#123; return (&lt;div style=&#123;&#123; color: '#76d0a3' &#125;&#125;&gt; &lt;div&gt;container&lt;/div&gt; &lt;Usual &#123;...this.props&#125; /&gt; &lt;/div&gt;); &#125;&#125;export default StyleContainer; 123456789101112131415161718import React, &#123; Component &#125; from 'react';import StyleContainer from './container-add-style';class FuncContainer extends Component &#123; handleClick() &#123; console.log('click'); &#125; render() &#123; const props = &#123; ...this.props, handleClick: this.handleClick, &#125;; return (&lt;StyleContainer &#123;...props&#125; /&gt;); &#125;&#125;export default FuncContainer; 外层Container必须要引入内层Container，进行包装，还有props的传递，同样要注意包装的顺序。当然你可以把所有的处理都放到一个Container里。那用HOC怎么处理呢，相信大家有清晰的答案了。12345678910111213141516171819202122232425262728293031323334const addFunc = WrappedComponent =&gt; class extends Component &#123; handleClick() &#123; console.log('click'); &#125; render() &#123; const props = &#123; ...this.props, handleClick: this.handleClick, &#125;; return &lt;WrappedComponent &#123;...props&#125; /&gt;; &#125;&#125;;const addStyle = WrappedComponent =&gt; class extends Component &#123; render() &#123; return (&lt;div style=&#123;&#123; color: '#76d0a3' &#125;&#125;&gt; &lt;WrappedComponent &#123;...this.props&#125; /&gt; &lt;/div&gt;); &#125;&#125;;const WrappenComponent = addStyle(addFunc(Usual));class WrappedUsual extends Component &#123; render() &#123; console.log(this.props, 'props'); return (&lt;div&gt; &lt;WrappedComponent /&gt; &lt;/div&gt;); &#125;&#125; 显然HOC是更优雅一些的，每个HOC都定义自己独有的处理逻辑，需要的时候只需要去包装你的组件。相较于Container的方式，HOC耦合性更低，灵活性更高，可以自由组合，更适合应付复杂的业务。当然当你的需求很简单的时候，还是用Container去自由组合，应用场景需要你清楚。 注意点(约束)其实官网有很多，简单介绍一下。 最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数 要给hoc添加class名，便于debugger。我上面的好多栗子组件都没写class 名，请不要学我，因为我实在想不出叫什么名了… 当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。 静态方法要复制无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。 refs不会传递。 意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。 不要在render方法内部使用高阶组件。简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。也就是如果你每次返回的结果都不是一个引用，react以为发生了变化，去更替这个组件会导致之前组件的状态丢失。 12345678910111213 // HOC不要放到render函数里面 class WrappedUsual extends Component &#123; render() &#123; const WrappenComponent = addStyle(addFunc(Usual)); console.log(this.props, 'props'); return (&lt;div&gt; &lt;WrappedComponent /&gt; &lt;/div&gt;); &#125;&#125; 使用compose组合HOC。函数式编程的套路… 例如应用redux中的middleware以增强功能。redux-middleware解析123456789101112const addFuncHOC = ...const addStyleHOC = ...//省略const compose = (...funcs) =&gt; component =&gt; &#123; if (funcs.lenght === 0) &#123; return component; &#125; const last = funcs[funcs.length - 1]; return funcs.reduceRight((res, cur) =&gt; cur(res), last(component));&#125;;const WrappedComponent = compose(addFuncHOC, addStyleHOC)(Usual); 关于注意点，官网有所介绍，不再赘述。链接：地址 总结高阶组件最大的好处就是解耦和灵活性，在react的开发中还是很有用的。当然这不可能是高阶组件的全部用法。掌握了它的一些技巧，还有一些限制，你可以结合你的应用场景，发散思维，尝试一些不同的用法。 原文转自： 地址]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[edit-highlight]]></title>
    <url>%2F2018%2F02%2F01%2Fedit-highlight%2F</url>
    <content type="text"><![CDATA[把Lap的highlight风格做了一次大的调整，改成了自己最喜欢的atom-one-dark，只不过ES6的语法好像暂时没办法高亮，因为hexo内置hl渲染方法渲染出来的dom节点根本没办法对ES6部分写样式。下面的是效果的展示，暂时也算满意了，可能以后还会进行一次调整。 123456789101112131415161718function $initHighlight(block, cls) &#123; try &#123; if (cls.search(/\bno\-highlight\b/) != -1) return process(block, true, 0x0F) + ` class="$&#123;cls&#125;"`; &#125; catch (e) &#123; /* handle exception */ &#125; for (var i = 0 / 2; i &lt; classes.length; i++) &#123; if (checkCondition(classes[i]) === undefined) console.log('undefined'); &#125;&#125;const sss = () =&gt; &#123;&#125;let a = 1export $initHighlight; 12345678910111213&lt;!DOCTYPE html&gt;&lt;title&gt;Title&lt;/title&gt;&lt;style&gt;body &#123;width: 500px;&#125;&lt;/style&gt;&lt;script type="application/javascript"&gt; function $init() &#123;return true;&#125;&lt;/script&gt;&lt;body&gt; &lt;p checked class="title" id='title'&gt;Title&lt;/p&gt; &lt;!-- here goes the rest of the page --&gt;&lt;/body&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[日常随笔]]></title>
    <url>%2F2018%2F01%2F28%2Fdaily-1%2F</url>
    <content type="text"><![CDATA[关于Lap这个theme现在还差个人介绍模块和article模块没有进行优化，其他的可能弄完以后暂时先不更新了不过该有的功能和统计的东西肯定是会一点一点全部完成的 对于disqus，虽然看了一下其他人分享的如何去走代理设置让国内也可以访问，但我觉得这个办法还是不太好，既然无法成为一种更加通用可配置的方案，那就暂时不考虑了，也不是每个人都会去买一个vps进行配置，索性接这样弄: 3s访问不到就提示需要翻墙才可以进行评论。。 我觉得这样的处理方法比较通用吧。 近期安排最近可能要继续开始加班了，毕竟年末，所以写开源和学习的自由时间可能不是很多，但我想起我有一部分文章放在了简书，所以我决定先搬运一波，然后在把自己学Graphql的一些东西稍微写写，最近就是graphql了，别的也没空看了，等年后吧~ 最近一到周末就沉迷pokemon revolution不能自拔，可能要写一篇去安利一发了，毕竟是很多90后乃至80后满满的回忆~（更重要的是能和老外尬英文、PY）]]></content>
      <categories>
        <category>个人小纪</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于最近的折腾]]></title>
    <url>%2F2018%2F01%2F18%2F%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E7%9A%84%E6%8A%98%E8%85%BE%2F</url>
    <content type="text"><![CDATA[其实一直想用这个写博客的，但是出现过一次问题： 我在win上面提交都是正常的，但是把项目搞到mac上之后提交就出现了bug，研究了半天也没找到完美解决的办法，这才自己去搭建了一个自己的博客。。 自己是在搬瓦工的vps上搭建的，采用的是golang的gin + React + Nextjs ，总体上倒是没什么问题，唯一的问题就是cdn解析过慢，毕竟有墙的因素在，感觉身在国内确实也没法避免这个问题，性能上反正我自己是忍受不了了，于是还是回来写这个。。 不过好像也更新了很多，可能好多的插件什么的也不能用了，准备近期好好弄一下，把bug都解决掉。]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ng-router]]></title>
    <url>%2F2017%2F09%2F15%2Fng-router%2F</url>
    <content type="text"><![CDATA[ng-routerng-router可以把angular1变成一个spa应用，在页面上的原理就是渲染了不同的controller来实现不同的路由，具体实例代码如下：1234567891011121314151617181920212223242526272829303132&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;AngularJS 路由实例 - 菜鸟教程&lt;/title&gt; &lt;/head&gt; &lt;body ng-app='routingDemoApp'&gt; &lt;h2&gt;AngularJS 路由应用&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#/"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#/computers"&gt;电脑&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#/printers"&gt;打印机&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#/blabla"&gt;其他&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div ng-view&gt;&lt;/div&gt; &lt;script src="http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js"&gt;&lt;/script&gt; &lt;script src="http://apps.bdimg.com/libs/angular-route/1.3.13/angular-route.js"&gt;&lt;/script&gt; &lt;script&gt; angular.module('routingDemoApp',['ngRoute']) .config(['$routeProvider', function($routeProvider)&#123; $routeProvider .when('/',&#123;template:'这是首页页面'&#125;) .when('/computers',&#123;template:'这是电脑分类页面'&#125;) .when('/printers',&#123;template:'这是打印机页面'&#125;) .otherwise(&#123;redirectTo:'/'&#125;); &#125;]); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 首先，载入了实现路由的js文件：angular-route.js； 然后，包含了ngRoute模块作为主应用模块的依赖模块。1angular.module('routingDemoApp',['ngRoute']) 使用ngView指令1&lt;div ng-view&gt;&lt;/div&gt; 该div内html会根据路由的变化来变化。 然后配置$routeProvider, 用于定义我们的路由规则 1234567module.config(['$routeProvider', function($routeProvider)&#123; $routeProvider .when('/',&#123;template:'这是首页页面'&#125;) .when('/computers',&#123;template:'这是电脑分类页面'&#125;) .when('/printers',&#123;template:'这是打印机页面'&#125;) .otherwise(&#123;redirectTo:'/'&#125;);&#125;]);]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ngapi]]></title>
    <url>%2F2017%2F09%2F15%2Fngapi%2F</url>
    <content type="text"><![CDATA[ngApiangular JS全局API用于执行常见任务的JS函数集合，如： 比较对象 迭代对象 转换对象简单的说就是将一些工作中常用的方法封装到了angular.prototype上了，下面有几个典型的： angular.lowercase() - 转换字符为小写 angular.uppercase() - 转换字符为大写 angular.isString() - 判断是否是字符串 angular.isNumber() - 判断是否是数字 例子： 地址]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ng过滤器]]></title>
    <url>%2F2017%2F09%2F14%2Fng-filter%2F</url>
    <content type="text"><![CDATA[ng过滤器所有的例子会写在这里：例子 首先学习一下ng1的过滤器的一个基本写法： 一个过滤器，不带参数的情况1&#123;&#123;expression | filter&#125;&#125; 一个过滤器，带参数的情况1&#123;&#123;expression | filter:arguments&#125;&#125; 一个过滤器，带多个参数的情况1&#123;&#123;expression | filter: arg1: arg2: ...&#125;&#125; 多个过滤器，不带参数的情况1&#123;&#123;expression | filter1 | filter2 | ...&#125;&#125; 先学习自定义的，现找出来10个： 1. currency顾名思义，用于将数字转换为货币的默认的话，是将数字转化成了当前使用语言环境的符号当然也可以设置自定义符号，格式：1&#123;&#123; currency_expression | currency : symbol : fractionSize&#125;&#125; 其中symbol代表你要自定义的货币符号，fractionSize代表小数位的取舍量 2. date根据要求将时间转换成字符串，开发当中经常用到，格式化的字符串可以由以下原件组成： ‘yyyy’: 年份用4位数字表示(e.g. AD 1 =&gt; 0001, AD 2010 =&gt; 2010) ‘yy’: 年份用2位数字表示, 补全0 (00-99). (e.g. AD 2001 =&gt; 01, AD 2010 =&gt; 10) ‘y’: 年份用最少位数字表示, e.g. (AD 1 =&gt; 1, AD 199 =&gt; 199) ‘MMMM’: 月份 (January-December) ‘MMM’: 月份 (Jan-Dec) ‘MM’: 月份, 补全0 (01-12) ‘M’: 月份 (1-12) ‘dd’: 日期, 补全0 (01-31) ‘d’: 日期 (1-31) ‘EEEE’: 星期,(Sunday-Saturday) ‘EEE’: 星期, (Sun-Sat) ‘HH’: 小时, 补全0 (00-23) ‘H’: 补全0 (0-23) ‘hh’: AM/PM 表示的小时, 补全0 (01-12) ‘h’: AM/PM 表示的小时, (1-12) ‘mm’: 分钟, 补全0 (00-59) ‘m’: 分钟 (0-59) ‘ss’: 秒, 补全0 (00-59) ‘s’: 秒 (0-59) ‘sss’: 毫秒, 补全0 (000-999) ‘a’: AM/PM 标记 ‘Z’: 用4位表示时区的偏移 (-1200-+1200) ‘ww’: 周数, 补全0 (00-53). 01周是每年的包含第一个周四的周 ‘w’: Week of year (0-53). 01周是每年的包含第一个周四的周 ‘G’, ‘GG’, ‘GGG’: 时代的简写字符串 (e.g. ‘AD’) ‘GGGG’: 时代的完整字符串 (e.g. ‘Anno Domini’) 格式字符串还可以是下列预定义的本地化的格式之一: ‘medium’: en_US 地区的形式，等同于 ‘MMM d, y h:mm:ss a’ (e.g. Sep 3, 2010 12:05:08 PM) ‘short’: en_US 地区的形式，等同于 ‘M/d/yy h:mm a’ (e.g. 9/3/10 12:05 PM) ‘fullDate’: en_US 地区的形式，等同于 ‘EEEE, MMMM d, y’ (e.g. Friday, September 3, 2010) ‘longDate’: en_US 地区的形式，等同于 ‘MMMM d, y’ (e.g. September 3, 2010) ‘mediumDate’: en_US 地区的形式，等同于 ‘MMM d, y’ (e.g. Sep 3, 2010) ‘shortDate’: en_US 地区的形式，等同于 ‘M/d/yy’ (e.g. 9/3/10) ‘mediumTime’: en_US 地区的形式，等同于 ‘h:mm:ss a’ (e.g. 12:05:08 PM) ‘shortTime’: en_US 地区的形式，等同于 ‘h:mm a’ (e.g. 12:05 PM) 格式字符串可以包含文字。但是需要使用 ‘ 包裹进行转义 (e.g. “h ‘in the morning’”).如果想使用单引号,则需要转义 - 举个例子, 在一行里有两个单引号 (e.g. “h ‘o’’clock’”).]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于es7bind语法的小纪]]></title>
    <url>%2F2017%2F04%2F21%2Fes7bind%2F</url>
    <content type="text"><![CDATA[有关es7 function bind syntax的东西因为群里有大佬以前提到过，但是因为自己太菜了根本无法理解，所以就去学习了一下。。 概念所谓的function bind syntax ，其实就是一个绑定的语法糖，就和箭头函数是类似的（箭头函数是声明函数时绑定this的语法糖，这里就有个坑，用箭头函数声明的方法就不能再使用::去绑定了，不会起作用。。） 作用简单来说::有两种作用： 当::出现在一个对象名的签名，且对象名后面紧跟着一个它的方法名的时候，作用就是把这个对象绑定为这个方法的this 12345678let obj = &#123; method() &#123; console.log(this) &#125;&#125;::obj.method//等同于obj.method.bind(obj) 当::出现在对象和方法名之间的时候，将这个对象绑定为这个方法的this,当然，因为这个绑定后还是一个函数，所以也可以直接调用 123456789101112131415let obj = &#123; foo: 'bar'&#125;function method() &#123; console.log(this.foo)&#125;obj::method()//等同于method.call(obj)()obj::method//等同于method.bind(obj)]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ecmascript7</tag>
      </tags>
  </entry>
</search>
